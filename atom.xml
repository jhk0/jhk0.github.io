<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jhko&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.jhko.me/"/>
  <updated>2017-11-26T17:45:57.617Z</updated>
  <id>http://blog.jhko.me/</id>
  
  <author>
    <name>Jihoon Ko</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>스칼라(Scala) 기초</title>
    <link href="http://blog.jhko.me/2017/11/27/scala-basics/"/>
    <id>http://blog.jhko.me/2017/11/27/scala-basics/</id>
    <published>2017-11-26T17:37:43.000Z</published>
    <updated>2017-11-26T17:45:57.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scala-Basics"><a href="#Scala-Basics" class="headerlink" title="Scala Basics"></a>Scala Basics</h1><blockquote>
<p><a href="https://www.coursera.org/learn/progfun1/home" target="_blank" rel="external">Functional Programming Principles in Scala</a> 수업을 듣는데 도움이 되기 위해 <a href="https://www.scala-exercises.org/scala_tutorial" target="_blank" rel="external">Scala Exercises</a>에 있는 내용을 정리함.</p>
</blockquote>
<h2 id="Terms-And-Types"><a href="#Terms-And-Types" class="headerlink" title="Terms And Types"></a>Terms And Types</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>                 <span class="comment">// Number</span></div><div class="line"><span class="literal">true</span>              <span class="comment">// Boolean</span></div><div class="line"><span class="string">"Hello, Scala!"</span>   <span class="comment">// Text</span></div><div class="line"></div><div class="line"><span class="number">1</span> + <span class="number">2</span>                   <span class="comment">// = 3</span></div><div class="line"><span class="string">"Hello, "</span> ++ <span class="string">"Scala!"</span>   <span class="comment">// = "Hello, Scala!"</span></div><div class="line"></div><div class="line"><span class="comment">// Method calls</span></div><div class="line"><span class="string">"Hello, Scala!"</span>.size</div><div class="line"><span class="number">3</span> + <span class="number">2</span> == <span class="number">3.</span>+(<span class="number">2</span>)         <span class="comment">// Operators are methods.</span></div><div class="line"><span class="number">1.</span>to(<span class="number">10</span>) == <span class="number">1</span> to <span class="number">10</span>     <span class="comment">// Infix Syntax (%/%, %*%, %in%)</span></div><div class="line"></div><div class="line">(<span class="number">0</span> to <span class="number">3</span>).contains(<span class="number">3</span>) == <span class="literal">true</span></div><div class="line">(<span class="number">0</span> until <span class="number">3</span>).contains(<span class="number">3</span>) == <span class="literal">false</span></div><div class="line"><span class="string">"foo"</span>.drop(<span class="number">1</span>) == <span class="string">"oo"</span></div><div class="line"><span class="string">"bar"</span>.take(<span class="number">2</span>) == <span class="string">"ba"</span></div></pre></td></tr></table></figure>
<h2 id="Definitions-And-Evaluation"><a href="#Definitions-And-Evaluation" class="headerlink" title="Definitions And Evaluation"></a>Definitions And Evaluation</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> radius = <span class="number">10</span></div><div class="line"><span class="keyword">val</span> pi = <span class="number">3.14159</span></div><div class="line"></div><div class="line">pi * radius * radius</div><div class="line"></div><div class="line"><span class="comment">// Methods</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span></span>(x: <span class="type">Double</span>) = x * x</div><div class="line">square(<span class="number">3.0</span>)                     <span class="comment">// = 9</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumOfSquares</span></span>(x: <span class="type">Double</span>, y: <span class="type">Double</span>) = square(x) + square(y)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangleArea</span></span>(base: <span class="type">Double</span>, height: <span class="type">Double</span>): <span class="type">Double</span> = base * height / <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment">// Val vs Def</span></div><div class="line"><span class="keyword">val</span> x = <span class="number">2</span></div><div class="line"><span class="keyword">val</span> y = square(x)   <span class="comment">// y above refers to 4, not square(2).</span></div><div class="line"></div><div class="line"><span class="comment">// Value definitions and termination</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span></span>: <span class="type">Int</span> = loop</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span> </span>= loop            <span class="comment">// No problem.</span></div><div class="line"><span class="keyword">val</span> x = loop            <span class="comment">// Lead to an infinite loop.</span></div></pre></td></tr></table></figure>
<h3 id="Evaluation-strategy"><a href="#Evaluation-strategy" class="headerlink" title="Evaluation strategy"></a>Evaluation strategy</h3><ul>
<li><p>Call-by-value (Scala Normally uses this.)</p>
<ul>
<li>Every function argument only once.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sumOfSquares(<span class="number">3</span>, <span class="number">2</span> + <span class="number">2</span>)</div><div class="line">sumOfSquares(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">square(<span class="number">3</span>) + square(<span class="number">4</span>)</div><div class="line"><span class="number">3</span> * <span class="number">3</span> + square(<span class="number">4</span>)</div><div class="line"><span class="number">9</span> + square(<span class="number">4</span>)</div><div class="line"><span class="number">9</span> + <span class="number">4</span> * <span class="number">4</span></div><div class="line"><span class="number">9</span> + <span class="number">16</span></div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure>
</li>
<li><p>Call-by-name</p>
<ul>
<li>a function argument is not evaluated if the corresponding parameter is unused.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sumOfSquares(<span class="number">3</span>, <span class="number">2</span> + <span class="number">2</span>)</div><div class="line">square(<span class="number">3</span>) + square(<span class="number">2</span> + <span class="number">2</span>)</div><div class="line"><span class="number">3</span> * <span class="number">3</span> + square(<span class="number">2</span> + <span class="number">2</span>)</div><div class="line"><span class="number">9</span> + square(<span class="number">2</span> + <span class="number">2</span>)</div><div class="line"><span class="number">9</span> + (<span class="number">2</span> + <span class="number">2</span>) * (<span class="number">2</span> + <span class="number">2</span>)</div><div class="line"><span class="number">9</span> + <span class="number">4</span> * (<span class="number">2</span> + <span class="number">2</span>)</div><div class="line"><span class="number">9</span> + <span class="number">4</span> * <span class="number">4</span></div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure>
<ul>
<li>Both strategies reduce to the same final values as long as the reduced expression consists of pure functions, and both evaluations terminate.<ul>
<li><a href="https://alvinalexander.com/scala/fp-book/definition-of-pure-function" target="_blank" rel="external">The Definition of “Pure Function”</a><ul>
<li>A pure function is a function that depends only on its declared input parameters and its algorithm to produce its output.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Functional-Loops"><a href="#Functional-Loops" class="headerlink" title="Functional Loops"></a>Functional Loops</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs</span></span>(x: <span class="type">Int</span>) = <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) x <span class="keyword">else</span> -x</div><div class="line"></div><div class="line"><span class="literal">true</span>  <span class="literal">false</span>      <span class="comment">// Constants</span></div><div class="line">!b               <span class="comment">// Negation</span></div><div class="line">b &amp;&amp; b           <span class="comment">// Conjunction</span></div><div class="line">b || b           <span class="comment">// Disjunction</span></div><div class="line"></div><div class="line"><span class="comment">// Comparison operations</span></div><div class="line">e &lt;= e </div><div class="line">e &gt; e</div><div class="line">e == e</div><div class="line">e != e</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="number">1</span> </div><div class="line">  <span class="keyword">else</span> factorial(n - <span class="number">1</span>) * n</div></pre></td></tr></table></figure>
<h2 id="Lexical-Scopes"><a href="#Lexical-Scopes" class="headerlink" title="Lexical Scopes"></a>Lexical Scopes</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> y = x + <span class="number">1</span>; y * y</div><div class="line"></div><div class="line">someLongExpression +      <span class="comment">// This is not finished.</span></div><div class="line">  someOtherExpression</div><div class="line"></div><div class="line">(someLongExpression       <span class="comment">// This is the same as above.</span></div><div class="line">  + someOtherExpression)</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Top-level definitions</span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyExecutableProgram</span> </span>&#123;</div><div class="line">  <span class="keyword">val</span> myVal = …</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">myMethod</span> </span>= …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">MyExecutableProgram</span>.myMethod</div><div class="line"></div><div class="line"><span class="comment">// Packages and imports</span></div><div class="line"><span class="keyword">package</span> foo</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Baz</span> </span>&#123;</div><div class="line">  <span class="comment">// Bar is visible because it is in the `foo` package too</span></div><div class="line">  <span class="type">Bar</span>.someMethod</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> quux</div><div class="line"><span class="keyword">import</span> foo.<span class="type">Bar</span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Quux</span> </span>&#123;</div><div class="line">  <span class="comment">// Bar refers to the imported `foo.Bar`</span></div><div class="line">  <span class="type">Bar</span>.someMethod</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Automatic imports<ul>
<li>All member of package <code>scala</code> and <code>java.lang</code>.</li>
<li>All member of the singleton object <code>scala.Predef</code>.</li>
</ul>
</li>
</ul>
<h3 id="Writing-executable-programs"><a href="#Writing-executable-programs" class="headerlink" title="Writing executable programs"></a>Writing executable programs</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Hello</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) = println(<span class="string">"hello world!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Start from the command line.</span></div><div class="line">$ scala Hello</div></pre></td></tr></table></figure>
<h3 id="Nested-functions"><a href="#Nested-functions" class="headerlink" title="Nested functions"></a>Nested functions</h3><ul>
<li>It’s good functional programming style to split up a task into many small functions.</li>
<li>Blocks and visibility<ul>
<li>only visible from within the block.</li>
<li>shadow definitions of the same names outside the block.</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>) = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sqrtIter</span></span>(guess: <span class="type">Double</span>): <span class="type">Double</span> =</div><div class="line">    <span class="keyword">if</span> (isGoodEnough(guess)) guess</div><div class="line">    <span class="keyword">else</span> sqrtIter(improve(guess))</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">improve</span></span>(guess: <span class="type">Double</span>) =</div><div class="line">    (guess + x / guess) / <span class="number">2</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isGoodEnough</span></span>(guess: <span class="type">Double</span>) =</div><div class="line">    abs(square(guess) - x) &lt; <span class="number">0.001</span></div><div class="line"></div><div class="line">  sqrtIter(<span class="number">1.0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Tail-Recursion"><a href="#Tail-Recursion" class="headerlink" title="Tail Recursion"></a>Tail Recursion</h2><ul>
<li>gcd (tail recursion)<ul>
<li>Tail recursion<ul>
<li>If you have a recursive function that calls itself as its last action, then you can reuse the stack frame of that function.<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@tailrec</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = </div><div class="line">  <span class="keyword">if</span> (b == <span class="number">0</span>) a <span class="keyword">else</span> gcd(b, a % b)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>If @tailrec is given, and the implementation of gcd were not tail recursive, an error would be issued.</li>
</ul>
<ul>
<li><p>factorial</p>
<ul>
<li>becomes bigger and bigger until we end when we finally reduce it to the final value.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> n * factorial(n - <span class="number">1</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>factorial (tail recursion)</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</div><div class="line">  <span class="meta">@tailrec</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">iter</span></span>(x: <span class="type">Int</span>, result: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) result</div><div class="line">    <span class="keyword">else</span> iter(x - <span class="number">1</span>, result * x)</div><div class="line"></div><div class="line">  iter(n, <span class="number">1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Structuring-Information"><a href="#Structuring-Information" class="headerlink" title="Structuring Information"></a>Structuring Information</h2><ul>
<li>Data types defined with sealed trait and case classes are called algebraic data types. An algebraic data type definition can be thought of as a set of possible values.</li>
<li>Algebraic data types are a powerful way to structure information.</li>
<li>Case class<ul>
<li>toString, equals, and hashCode methods.</li>
<li>The constructor parameters you specify become properties with getters and setters.</li>
<li>You no longer have to use ’new’ to create an instance of your class.</li>
<li>You can use convenient extractors in match/case statements.</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Note</span>(<span class="params"></span></span></div><div class="line">  name: <span class="type">String</span>,</div><div class="line">  duration: <span class="type">String</span>,</div><div class="line">  octave: <span class="type">Int</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// constructor</span></div><div class="line"><span class="keyword">val</span> c3 = <span class="type">Note</span>(<span class="string">"C"</span>, <span class="string">"Quarter"</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
<h3 id="Sealed-traits"><a href="#Sealed-traits" class="headerlink" title="Sealed traits"></a>Sealed traits</h3><ul>
<li>A sealed trait can be extended only in the same file.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">Symbol</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Note</span>(<span class="params">name: <span class="type">String</span>, duration: <span class="type">String</span>, octave: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Symbol</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Rest</span>(<span class="params">duration: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Symbol</span></span></div><div class="line"></div><div class="line"><span class="keyword">val</span> symbol1: <span class="type">Symbol</span> = <span class="type">Note</span>(<span class="string">"C"</span>, <span class="string">"Quarter"</span>, <span class="number">3</span>)</div><div class="line"><span class="keyword">val</span> symbol2: <span class="type">Symbol</span> = <span class="type">Rest</span>(<span class="string">"Whole"</span>)</div></pre></td></tr></table></figure>
<h3 id="Pattern-matching"><a href="#Pattern-matching" class="headerlink" title="Pattern matching"></a>Pattern matching</h3><ul>
<li>We need a way to distinguish between the different cases of symbols.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">symbolDuration</span></span>(symbol: <span class="type">Symbol</span>): <span class="type">String</span> =</div><div class="line">  symbol <span class="keyword">match</span> &#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Note</span>(name, duration, octave) =&gt; duration</div><div class="line">    <span class="keyword">case</span> <span class="type">Rest</span>(duration) =&gt; duration</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>When we write <code>case Rest(duration) =&gt; …</code>, we say that <code>Rest(…)</code> is a constructor pattern: it matches all the values of type <code>Rest</code>.</li>
<li>The compiler can leverage this knowledge to warn us if we write code that does not handle all the cases:</li>
</ul>
<h3 id="Equals"><a href="#Equals" class="headerlink" title="Equals"></a>Equals</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Note</span>(<span class="params">name: <span class="type">String</span>, duration: <span class="type">String</span>, octave: <span class="type">Int</span></span>)</span></div><div class="line"><span class="keyword">val</span> c3 = <span class="type">Note</span>(<span class="string">"C"</span>, <span class="string">"Quarter"</span>, <span class="number">3</span>)</div><div class="line"><span class="keyword">val</span> otherC3 = <span class="type">Note</span>(<span class="string">"C"</span>, <span class="string">"Quarter"</span>, <span class="number">3</span>)</div><div class="line"><span class="keyword">val</span> f3 = <span class="type">Note</span>(<span class="string">"F"</span>, <span class="string">"Quarter"</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">(c3 == otherC3) <span class="comment">// true </span></div><div class="line">(c3 == f3)      <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="Enumerations"><a href="#Enumerations" class="headerlink" title="Enumerations"></a>Enumerations</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> invalidNote = <span class="type">Note</span>(<span class="string">"not a name"</span>, <span class="string">"not a duration"</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
<ul>
<li>We want to restrict the space of the possible note names and durations to a set of fixed alternatives.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">NoteName</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">NoteName</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">NoteName</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">NoteName</span></span></div><div class="line">…</div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">G</span> <span class="keyword">extends</span> <span class="title">NoteName</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Note</span>(<span class="params">name: <span class="type">NoteName</span>, duration: <span class="type">String</span>, octave: <span class="type">Int</span></span>)</span></div></pre></td></tr></table></figure>
<h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher Order Functions"></a>Higher Order Functions</h2><ul>
<li>Functional languages treat functions as first-class values.</li>
<li>A function can be passed as a parameter and returned as a result.</li>
<li><p>Functions that take other functions as parameters or that return functions as results are called higher order functions.</p>
</li>
<li><p>Before</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumInts</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (a &gt; b) <span class="number">0</span> <span class="keyword">else</span> a + sumInts(a + <span class="number">1</span>, b)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = x * x * x</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumCubes</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (a &gt; b) <span class="number">0</span> <span class="keyword">else</span> cube(a) + sumCubes(a + <span class="number">1</span>, b)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumFactorials</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (a &gt; b) <span class="number">0</span> <span class="keyword">else</span> factorial(a) + sumFactorials(a + <span class="number">1</span>, b)</div></pre></td></tr></table></figure>
</li>
<li><p>After (Higher order functions)</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>, a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (a &gt; b) <span class="number">0</span></div><div class="line">  <span class="keyword">else</span> f(a) + sum(f, a + <span class="number">1</span>, b)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">id</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = x</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumInts</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) = sum(id, a, b)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumCubes</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) = sum(cube, a, b)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumFactorials</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) = sum(factorial, a, b)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Anonymous-Functions"><a href="#Anonymous-Functions" class="headerlink" title="Anonymous Functions"></a>Anonymous Functions</h3><ul>
<li>Passing functions as parameters leads to the creation of many small functions.</li>
<li>Sometimes it is tedious to have to define (and name) these functions using def.</li>
<li>Function literals, which let us write a function without giving it a name. These are called anonymous functions.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(x: <span class="type">Int</span>) =&gt; x * x * x</div><div class="line">(x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y</div><div class="line"></div><div class="line"><span class="comment">// Syntactic sugar, An anonymous function can always be expressed using def.</span></div><div class="line">&#123; <span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(x1: <span class="type">T1</span>, …, xn: <span class="type">Tn</span>) = e ; f &#125;</div><div class="line"></div><div class="line"><span class="comment">// Sums in a shorter way.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumInts</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) = sum(x =&gt; x, a, b)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumCubes</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) = sum(x =&gt; x * x * x, a, b)</div></pre></td></tr></table></figure>
<h2 id="Standard-Library"><a href="#Standard-Library" class="headerlink" title="Standard Library"></a>Standard Library</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul>
<li>Lists are immutable, recursive.</li>
<li>Lists are homogeneous: the elements of a list must all have the same type.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> fruit = <span class="type">List</span>(<span class="string">"apples"</span>, <span class="string">"oranges"</span>, <span class="string">"pears"</span>)</div><div class="line"><span class="keyword">val</span> nums = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="keyword">val</span> diag3 = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">List</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>), <span class="type">List</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>))</div><div class="line"><span class="keyword">val</span> empty = <span class="type">List</span>()</div><div class="line"></div><div class="line"><span class="keyword">val</span> fruit: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>(<span class="string">"apples"</span>, <span class="string">"oranges"</span>, <span class="string">"pears"</span>)</div><div class="line"><span class="keyword">val</span> nums: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="keyword">val</span> diag3: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">List</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>), <span class="type">List</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>))</div><div class="line"><span class="keyword">val</span> empty: <span class="type">List</span>[<span class="type">Nothing</span>] = <span class="type">List</span>()</div></pre></td></tr></table></figure>
<ul>
<li><p>Right associativity.</p>
<ul>
<li>A :: B :: C is interpreted as A :: (B :: C).</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> fruit = <span class="string">"apples"</span> :: (<span class="string">"oranges"</span> :: (<span class="string">"pears"</span> :: <span class="type">Nil</span>))</div><div class="line"><span class="keyword">val</span> nums = <span class="number">1</span> :: (<span class="number">2</span> :: (<span class="number">3</span> :: (<span class="number">4</span> :: <span class="type">Nil</span>)))</div><div class="line"><span class="keyword">val</span> empty = <span class="type">Nil</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> nums = <span class="number">1</span> :: <span class="number">2</span> :: <span class="number">3</span> :: <span class="number">4</span> :: <span class="type">Nil</span></div><div class="line"><span class="keyword">val</span> nums = <span class="type">Nil</span>.::(<span class="number">4</span>).::(<span class="number">3</span>).::(<span class="number">2</span>).::(<span class="number">1</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">nums <span class="keyword">match</span> &#123;</div><div class="line">  <span class="comment">// Lists of `Int` that starts with `1` and then `2`</span></div><div class="line">  <span class="keyword">case</span> <span class="number">1</span> :: <span class="number">2</span> :: xs =&gt; …</div><div class="line">  <span class="comment">// Lists of length 1</span></div><div class="line">  <span class="keyword">case</span> x :: <span class="type">Nil</span> =&gt; …</div><div class="line">  <span class="comment">// Same as `x :: Nil`</span></div><div class="line">  <span class="keyword">case</span> <span class="type">List</span>(x) =&gt; …</div><div class="line">  <span class="comment">// The empty list, same as `Nil`</span></div><div class="line">  <span class="keyword">case</span> <span class="type">List</span>() =&gt;</div><div class="line">  <span class="comment">// A list that contains as only element another list that starts with `2`</span></div><div class="line">  <span class="keyword">case</span> <span class="type">List</span>(<span class="number">2</span> :: xs) =&gt; …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertionSort</span></span>(xs: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">Int</span>] = xs <span class="keyword">match</span> &#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">List</span>() =&gt; <span class="type">List</span>()</div><div class="line">  <span class="keyword">case</span> y :: ys =&gt; insert(y, insertionSort(ys))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> cond: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Boolean</span> = (x, y) =&gt; x &lt; y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(x: <span class="type">Int</span>, xs: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">Int</span>] =</div><div class="line">  xs <span class="keyword">match</span> &#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">List</span>() =&gt; x :: <span class="type">Nil</span></div><div class="line">    <span class="keyword">case</span> y :: ys =&gt;</div><div class="line">      <span class="keyword">if</span> (cond(x, y)) x :: y :: ys</div><div class="line">      <span class="keyword">else</span> y :: insert(x, ys)</div><div class="line">  &#125;</div><div class="line">insert(<span class="number">2</span>, <span class="number">1</span> :: <span class="number">3</span> :: <span class="type">Nil</span>) <span class="comment">// (1 :: 2 :: 3 :: Nil)</span></div><div class="line">insert(<span class="number">1</span>, <span class="number">2</span> :: <span class="number">3</span> :: <span class="type">Nil</span>) <span class="comment">// (1 :: 2 :: 3 :: Nil)</span></div><div class="line">insert(<span class="number">3</span>, <span class="number">1</span> :: <span class="number">2</span> :: <span class="type">Nil</span>) <span class="comment">// (1 :: 2 :: 3 :: Nil)</span></div></pre></td></tr></table></figure>
<ul>
<li><a href="https://alvinalexander.com/scala/how-to-use-functions-as-variables-values-in-scala-fp" target="_blank" rel="external">How to use functions as variables (values) in Scala</a></li>
</ul>
<h4 id="Common-Operations-on-Lists"><a href="#Common-Operations-on-Lists" class="headerlink" title="Common Operations on Lists"></a>Common Operations on Lists</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).map(x =&gt; x + <span class="number">1</span>) == <span class="type">List</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).filter(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>) == <span class="type">List</span>(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment">// Transform each element of a list into a list and flatten the results into a single list.</span></div><div class="line"><span class="keyword">val</span> xs =</div><div class="line">  <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).flatMap &#123; x =&gt;</div><div class="line">    <span class="type">List</span>(x, <span class="number">2</span> * x, <span class="number">3</span> * x)</div><div class="line">  &#125;</div><div class="line">xs == <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>)</div></pre></td></tr></table></figure>
<h3 id="Optional-Values"><a href="#Optional-Values" class="headerlink" title="Optional Values"></a>Optional Values</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// An Option[A] can either be None or Some[A] (if there is a value).</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>): <span class="type">Option</span>[<span class="type">Double</span>] =</div><div class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="type">None</span> <span class="keyword">else</span> <span class="type">Some</span>(…)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span></span>(x: <span class="type">Double</span>): <span class="type">String</span> =</div><div class="line">  sqrt(x) <span class="keyword">match</span> &#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">None</span> =&gt; <span class="string">"no result"</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Some</span>(y) =&gt; y.toString</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h3><ul>
<li><p>Try</p>
<ul>
<li>Try[A] also have map, filter and flatMap. They behave the same as with Option[A], excepted that any exception that is thrown during their execution is converted into a Failure.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>): <span class="type">Try</span>[<span class="type">Double</span>] =</div><div class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="type">Failure</span>(<span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">"x must be positive"</span>))</div><div class="line">  <span class="keyword">else</span> <span class="type">Success</span>(…)</div></pre></td></tr></table></figure>
</li>
<li><p>Either</p>
<ul>
<li>Either[A, B] represents a value that can either be of type A or of type B. It can be decomposed in two cases: Left or Right.</li>
<li>Either has map and flatMap.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>): <span class="type">Either</span>[<span class="type">String</span>, <span class="type">Double</span>] =</div><div class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="type">Left</span>(<span class="string">"x must be positive"</span>)</div><div class="line">  <span class="keyword">else</span> <span class="type">Right</span>(…)</div><div class="line"></div><div class="line"><span class="type">Right</span>(<span class="number">1</span>).map((x: <span class="type">Int</span>) =&gt; x + <span class="number">1</span>)     <span class="comment">// Right(2)</span></div><div class="line"><span class="type">Left</span>(<span class="string">"foo"</span>).map((x: <span class="type">Int</span>) =&gt; x + <span class="number">1</span>)  <span class="comment">// Left("foo")</span></div><div class="line"></div><div class="line"><span class="type">Right</span>(<span class="number">1</span>).filterOrElse(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>, <span class="string">"Odd value"</span>) <span class="comment">// Left("Odd value")</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">triple</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = <span class="number">3</span> * x</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tripleEither</span></span>(x: <span class="type">Either</span>[<span class="type">String</span>, <span class="type">Int</span>]): <span class="type">Either</span>[<span class="type">String</span>, <span class="type">Int</span>] =</div><div class="line">  x.right.map(triple)</div><div class="line"></div><div class="line">tripleEither(<span class="type">Right</span>(<span class="number">1</span>))              <span class="comment">// Right(3)</span></div><div class="line">tripleEither(<span class="type">Left</span>(<span class="string">"not a number"</span>))  <span class="comment">// Left("not a number")</span></div><div class="line"></div><div class="line">tripleEither(<span class="type">Right</span>(<span class="number">1</span>)).right.get    <span class="comment">// 3</span></div><div class="line">tripleEither(<span class="type">Right</span>(<span class="number">1</span>)).isRight      <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Syntactic-Conveniences"><a href="#Syntactic-Conveniences" class="headerlink" title="Syntactic Conveniences"></a>Syntactic Conveniences</h2><h3 id="String-Interpolation"><a href="#String-Interpolation" class="headerlink" title="String Interpolation"></a>String Interpolation</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span></span>(name: <span class="type">String</span>): <span class="type">String</span> =</div><div class="line">  <span class="string">s"Hello, <span class="subst">$name</span>!"</span></div><div class="line"></div><div class="line">greet(<span class="string">"Scala"</span>) <span class="comment">// "Hello, Scala!"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span></span>(name: <span class="type">String</span>): <span class="type">String</span> =</div><div class="line">  <span class="string">s"Hello, <span class="subst">$&#123;name.toUpperCase&#125;</span>!"</span></div><div class="line"></div><div class="line">greet(<span class="string">"Scala"</span>) <span class="comment">// "Hello, SCALA!"</span></div></pre></td></tr></table></figure>
<h3 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pair</span></span>(i: <span class="type">Int</span>, s: <span class="type">String</span>): (<span class="type">Int</span>, <span class="type">String</span>) = (i, s)</div><div class="line">pair(<span class="number">42</span>, <span class="string">"foo"</span>) <span class="comment">// (42, "foo")</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> is: (<span class="type">Int</span>, <span class="type">String</span>) = (<span class="number">42</span>, <span class="string">"foo"</span>)</div><div class="line">is <span class="keyword">match</span> &#123;</div><div class="line">  <span class="keyword">case</span> (i, s) =&gt; i</div><div class="line">&#125;</div><div class="line">is._1   <span class="comment">// 42</span></div><div class="line">is._2   <span class="comment">// "foo"</span></div></pre></td></tr></table></figure>
<h3 id="Functions-as-Objects"><a href="#Functions-as-Objects" class="headerlink" title="Functions as Objects"></a>Functions as Objects</h3><ul>
<li>The function type A =&gt; B is just an abbreviation for the class scala.Function1[A, B]</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> scala</div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Function1</span>[<span class="type">A</span>, <span class="type">B</span>] </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">A</span>): <span class="type">B</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// An anonymous function</span></div><div class="line">(x: <span class="type">Int</span>) =&gt; x * x</div><div class="line"></div><div class="line"><span class="comment">// Expanded to</span></div><div class="line">&#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AnonFun</span> <span class="keyword">extends</span> <span class="title">Function1</span>[<span class="type">Int</span>, <span class="type">Int</span>] </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">Int</span>) = x * x</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">new</span> <span class="type">AnonFun</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// shorter, using anonymous class syntax.</span></div><div class="line"><span class="keyword">new</span> <span class="type">Function1</span>[<span class="type">Int</span>, <span class="type">Int</span>] &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">Int</span>) = x * x</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> f = (x: <span class="type">Int</span>) =&gt; x * x</div><div class="line">f(<span class="number">7</span>)</div><div class="line"></div><div class="line"><span class="comment">// Expanded to</span></div><div class="line"><span class="keyword">val</span> f = <span class="keyword">new</span> <span class="type">Function1</span>[<span class="type">Int</span>, <span class="type">Int</span>] &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">Int</span>) = x * x</div><div class="line">&#125;</div><div class="line">f.apply(<span class="number">7</span>)</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Not a function value.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(x: <span class="type">Int</span>): <span class="type">Boolean</span> = …</div><div class="line"></div><div class="line"><span class="comment">// Converted automatically to the function value</span></div><div class="line">(x: <span class="type">Int</span>) =&gt; f(x)</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://docs.scala-lang.org/style/declarations.html#function-values" target="_blank" rel="external">Function Values</a></li>
</ul>
<h3 id="FOR-Expressions"><a href="#FOR-Expressions" class="headerlink" title="FOR Expressions"></a>FOR Expressions</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Map</span></div><div class="line">xs.map(x =&gt; x + <span class="number">1</span>)</div><div class="line"><span class="keyword">for</span> (x &lt;- xs) <span class="keyword">yield</span> x + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">// Filter</span></div><div class="line">xs.filter(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line"><span class="keyword">for</span> (x &lt;- xs <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">yield</span> x</div><div class="line"></div><div class="line"><span class="comment">// Combined map and filter.</span></div><div class="line"><span class="keyword">for</span> (x &lt;- xs <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">yield</span> x + <span class="number">1</span></div><div class="line"><span class="comment">// Equivalent to</span></div><div class="line">xs.filter(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>).map(x =&gt; x + <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">// FlatMap</span></div><div class="line">xs.flatMap(x =&gt; ys.map(y =&gt; (x, y)))</div><div class="line"><span class="keyword">for</span> (x &lt;- xs; y &lt;- ys) <span class="keyword">yield</span> (x, y)</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">  x &lt;- xs <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span></div><div class="line">  y &lt;- ys</div><div class="line">&#125; <span class="keyword">yield</span> (x, y)</div><div class="line"></div><div class="line"><span class="comment">// Equivalent to</span></div><div class="line">xs.filter &#123; x =&gt;</div><div class="line">  x % <span class="number">2</span> == <span class="number">0</span></div><div class="line">&#125;.flatMap &#123; x =&gt;</div><div class="line">  ys.map &#123; y =&gt;</div><div class="line">    (x, y)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Equivalent to</span></div><div class="line">xs.filter(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>).flatMap(x =&gt; ys.map(y =&gt; (x, y)))</div></pre></td></tr></table></figure>
<h3 id="Method’s-Parameters"><a href="#Method’s-Parameters" class="headerlink" title="Method’s Parameters"></a>Method’s Parameters</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">Range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment">// Range constructor</span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Range</span>(<span class="params">start: <span class="type">Int</span>, end: <span class="type">Int</span>, step: <span class="type">Int</span></span>)</span></div><div class="line"><span class="comment">// Named parameters</span></div><div class="line"><span class="type">Range</span>(start = <span class="number">1</span>, end = <span class="number">10</span>, step = <span class="number">2</span>)</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Default vales</span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Range</span>(<span class="params">start: <span class="type">Int</span>, end: <span class="type">Int</span>, step: <span class="type">Int</span> = 1</span>)</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> xs = <span class="type">Range</span>(start = <span class="number">1</span>, end = <span class="number">10</span>)</div><div class="line">xs.step   <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span></span>(x: <span class="type">Int</span>, xs: <span class="type">Int</span>*): <span class="type">Double</span> =</div><div class="line">  (x :: xs.to[<span class="type">List</span>]).sum.toDouble / (xs.size + <span class="number">1</span>)</div><div class="line"></div><div class="line">average(<span class="number">1</span>)        <span class="comment">// 1.0</span></div><div class="line">average(<span class="number">1</span>, <span class="number">2</span>)     <span class="comment">// 1.5</span></div><div class="line">average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment">// 2.0</span></div><div class="line"></div><div class="line"><span class="comment">// You can do that by adding a : _* type ascription to your list.</span></div><div class="line"><span class="keyword">val</span> xs: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">average(<span class="number">1</span>, xs: _*)</div></pre></td></tr></table></figure>
<h3 id="Type-Aliases"><a href="#Type-Aliases" class="headerlink" title="Type Aliases"></a>Type Aliases</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Meaningful names to type expressions.</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Result</span> </span>= <span class="type">Either</span>[<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>)]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide</span></span>(dividend: <span class="type">Int</span>, divisor: <span class="type">Int</span>): <span class="type">Result</span> =</div><div class="line">  <span class="keyword">if</span> (divisor == <span class="number">0</span>) <span class="type">Left</span>(<span class="string">"Division by zero"</span>)</div><div class="line">  <span class="keyword">else</span> <span class="type">Right</span>((dividend / divisor, dividend % divisor))</div><div class="line"></div><div class="line">divide(<span class="number">6</span>, <span class="number">4</span>)  <span class="comment">// Right((1, 2))</span></div><div class="line">divide(<span class="number">2</span>, <span class="number">0</span>)  <span class="comment">// Left("Division by zero")</span></div><div class="line">divide(<span class="number">8</span>, <span class="number">4</span>)  <span class="comment">// Right((2, 0))</span></div></pre></td></tr></table></figure>
<h2 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object Oriented Programming"></a>Object Oriented Programming</h2><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">numer</span> </span>= x</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">denom</span> </span>= y</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">val</span> x = <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// x: Rational = Rational@2abe0e27</span></div><div class="line">x.numer <span class="comment">// 1</span></div><div class="line">x.denom <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">addRational</span></span>(r: <span class="type">Rational</span>, s: <span class="type">Rational</span>): <span class="type">Rational</span> =</div><div class="line">  <span class="keyword">new</span> <span class="type">Rational</span>(</div><div class="line">    r.numer * s.denom + s.numer * r.denom,</div><div class="line">    r.denom * s.denom</div><div class="line">  )</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeString</span></span>(r: <span class="type">Rational</span>) =</div><div class="line">  r.numer + <span class="string">"/"</span> + r.denom</div><div class="line"></div><div class="line">makeString(addRational(<span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">2</span>, <span class="number">3</span>)))</div></pre></td></tr></table></figure>
<h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">numer</span> </span>= x</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">denom</span> </span>= y</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(r: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">new</span> <span class="type">Rational</span>(numer * r.denom + r.numer * denom, denom * r.denom)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mul</span></span>(r: <span class="type">Rational</span>) = ...</div><div class="line">  ...</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= numer + <span class="string">"/"</span> + denom</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> x = <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">3</span>)</div><div class="line"><span class="keyword">val</span> y = <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">5</span>, <span class="number">7</span>)</div><div class="line"><span class="keyword">val</span> z = <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">3</span>, <span class="number">2</span>)</div><div class="line">x.add(y).mul(z)   <span class="comment">//</span></div></pre></td></tr></table></figure>
<h3 id="Data-Abstraction"><a href="#Data-Abstraction" class="headerlink" title="Data Abstraction"></a>Data Abstraction</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Rational numbers to be simplified.</span></div><div class="line"><span class="comment">// Good when the functions numer and denom are called infrequently.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">gcd</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span> (b == <span class="number">0</span>) a <span class="keyword">else</span> gcd(b, a % b)</div><div class="line">  <span class="keyword">private</span> <span class="keyword">val</span> g = gcd(x, y)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">numer</span> </span>= x / g</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">denom</span> </span>= y / g</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">gcd</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span> (b == <span class="number">0</span>) a <span class="keyword">else</span> gcd(b, a % b)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">numer</span> </span>= x / gcd(x, y)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">denom</span> </span>= y / gcd(x, y)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Computed only once.</span></div><div class="line"><span class="comment">// Good when the functions numer and denom are called often.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">gcd</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span> (b == <span class="number">0</span>) a <span class="keyword">else</span> gcd(b, a % b)</div><div class="line">  <span class="keyword">val</span> numer = x / gcd(x, y)</div><div class="line">  <span class="keyword">val</span> denom = y / gcd(x, y)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The Client’s View<ul>
<li>Clients observe exactly the same behavior in each case.</li>
<li>This ability to choose different implementations of the data without affecting clients is called <em>data abstraction</em>.</li>
</ul>
</li>
</ul>
<h3 id="Self-Reference-Preconditions-Assertions"><a href="#Self-Reference-Preconditions-Assertions" class="headerlink" title="Self Reference, Preconditions, Assertions"></a>Self Reference, Preconditions, Assertions</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">  <span class="comment">// Precondition (IllegalArgumentException)</span></div><div class="line">  <span class="comment">// require is used to enforce a precondition on the caller of a function.</span></div><div class="line">  require(y &gt; <span class="number">0</span>, <span class="string">"denominator must be positive"</span>)</div><div class="line"></div><div class="line">  <span class="comment">// Self Reference: this.</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">less</span></span>(that: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">this</span>.numer * that.denom &lt; that.numer * <span class="keyword">this</span>.denom</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(that: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.less(that)) that <span class="keyword">else</span> <span class="keyword">this</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Assertion (AssertionError)</span></div><div class="line"><span class="comment">// assert is used as to check the code of the function itself.</span></div><div class="line"><span class="keyword">val</span> x = sqrt(y)</div><div class="line">assert(x &gt;= <span class="number">0</span>)</div></pre></td></tr></table></figure>
<h3 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h3><ul>
<li><p>A class implicitly introduces a constructor. This one is called the <code>primary constructor</code> of the class.</p>
</li>
<li><p><code>Auxiliary constructors</code></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(x: <span class="type">Int</span>) = <span class="keyword">this</span>(x, <span class="number">1</span>)</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Classes-and-Substitutions"><a href="#Classes-and-Substitutions" class="headerlink" title="Classes and Substitutions"></a>Classes and Substitutions</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">x1, …, xn</span>) </span>&#123;</div><div class="line">  …</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(y1, …, ym) = b</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="type">C</span>(v1, …, vn).f(w1, …, wm)</div></pre></td></tr></table></figure>
<ul>
<li>The following three substitutions happen<ul>
<li>the substitution of the formal parameters y1, …, ym of the function f by the arguments w1, …, wm,</li>
<li>the substitution of the formal parameters x1, …, xn of the class C by the class arguments v1, …, vn,</li>
<li>the substitution of the self reference this by the value of the object new C(v1, …, vn).</li>
</ul>
</li>
</ul>
<h3 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h3><ul>
<li>An identifier can be:<ul>
<li>Alphanumeric: starting with a letter.</li>
<li>Symbolic: starting with an operator symbol, followed by other operator symbols.</li>
<li>The underscore character ‘_’ counts as a letter.</li>
<li>Alphanumeric identifiers can also end in an underscore, followed by some operator symbols.</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Example of identifiers.</span></div><div class="line">x1 * +?%&amp; vector_++ counter_=</div><div class="line"></div><div class="line"><span class="comment">// Operators for rationals.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">gcd</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span> (b == <span class="number">0</span>) a <span class="keyword">else</span> gcd(b, a % b)</div><div class="line">  <span class="keyword">private</span> <span class="keyword">val</span> g = gcd(x, y)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">numer</span> </span>= x / g</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">denom</span> </span>= y / g</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">+</span> </span>(r: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">new</span> <span class="type">Rational</span>(</div><div class="line">      numer * r.denom + r.numer * denom,</div><div class="line">      denom * r.denom</div><div class="line">    )</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">-</span> </span>(r: <span class="type">Rational</span>) = ...</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">*</span> </span>(r: <span class="type">Rational</span>) = ...</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> x = <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">val</span> y = <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">3</span>)</div><div class="line">x * x + y * y</div></pre></td></tr></table></figure>
<ul>
<li><p>Precedence Rules</p>
<ul>
<li>The precedence of an operator is determined by its first character.</li>
<li>The following table lists the characters in increasing order of priority precedence:</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(all letters)</div><div class="line">|</div><div class="line">^</div><div class="line">&amp;</div><div class="line">&lt; &gt;</div><div class="line">= !</div><div class="line">:</div><div class="line">+ -</div><div class="line">* / %</div><div class="line">(all other special characters)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Abstract-Classes"><a href="#Abstract-Classes" class="headerlink" title="Abstract Classes"></a>Abstract Classes</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IntSet</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">incl</span></span>(x: <span class="type">Int</span>): <span class="type">IntSet</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">contains</span></span>(x: <span class="type">Int</span>): <span class="type">Boolean</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Class extensions</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span> <span class="keyword">extends</span> <span class="title">IntSet</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">contains</span></span>(x: <span class="type">Int</span>): <span class="type">Boolean</span> = <span class="literal">false</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">incl</span></span>(x: <span class="type">Int</span>): <span class="type">IntSet</span> = <span class="keyword">new</span> <span class="type">NonEmpty</span>(x, <span class="keyword">new</span> <span class="type">Empty</span>, <span class="keyword">new</span> <span class="type">Empty</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonEmpty</span>(<span class="params">elem: <span class="type">Int</span>, left: <span class="type">IntSet</span>, right: <span class="type">IntSet</span></span>) <span class="keyword">extends</span> <span class="title">IntSet</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">contains</span></span>(x: <span class="type">Int</span>): <span class="type">Boolean</span> =</div><div class="line">    <span class="keyword">if</span> (x &lt; elem) left contains x</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; elem) right contains x</div><div class="line">    <span class="keyword">else</span> <span class="literal">true</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">incl</span></span>(x: <span class="type">Int</span>): <span class="type">IntSet</span> =</div><div class="line">    <span class="keyword">if</span> (x &lt; elem) <span class="keyword">new</span> <span class="type">NonEmpty</span>(elem, left incl x, right)</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; elem) <span class="keyword">new</span> <span class="type">NonEmpty</span>(elem, left, right incl x)</div><div class="line">    <span class="keyword">else</span> <span class="keyword">this</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>IntSet is called the superclass of Empty and NonEmpty.</li>
<li>Empty and NonEmpty are subclasses of IntSet.</li>
<li>The base classes of NonEmpty are IntSet and Object.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">foo</span> </span>= <span class="number">1</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bar</span></span>: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Non-abstract definition in a subclass by using override</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">foo</span> </span>= <span class="number">2</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bar</span> </span>= <span class="number">3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Reducer</span>(<span class="params">init: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">combine</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Int</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(xs: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">Int</span> =</div><div class="line">    xs <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Nil</span> =&gt; init</div><div class="line">      <span class="keyword">case</span> y :: ys =&gt; combine(y, reduce(ys))</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Product</span> <span class="keyword">extends</span> <span class="title">Reducer</span>(<span class="params">1</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">combine</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Int</span> = x * y</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Sum</span> <span class="keyword">extends</span> <span class="title">Reducer</span>(<span class="params">0</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">combine</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Int</span> = x + y</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> nums = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="type">Product</span>.reduce(nums)  <span class="comment">// 24</span></div><div class="line"><span class="type">Sum</span>.reduce(nums)      <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<h3 id="Object-Definitions"><a href="#Object-Definitions" class="headerlink" title="Object Definitions"></a>Object Definitions</h3><ul>
<li>This defines a singleton object named Empty.</li>
<li>Singleton objects are values, so Empty evaluates to itself.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Empty</span> <span class="keyword">extends</span> <span class="title">IntSet</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">contains</span></span>(x: <span class="type">Int</span>): <span class="type">Boolean</span> = <span class="literal">false</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">incl</span></span>(x: <span class="type">Int</span>): <span class="type">IntSet</span> = <span class="keyword">new</span> <span class="type">NonEmpty</span>(x, <span class="type">Empty</span>, <span class="type">Empty</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Dynamic-Binding"><a href="#Dynamic-Binding" class="headerlink" title="Dynamic Binding"></a>Dynamic Binding</h3><ul>
<li>The code invoked by a method call depends on the runtime type of the object that contains the method. </li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Empty</span> contains <span class="number">1</span>                          <span class="comment">// false </span></div><div class="line"><span class="keyword">new</span> <span class="type">NonEmpty</span>(<span class="number">7</span>, <span class="type">Empty</span>, <span class="type">Empty</span>) contains <span class="number">7</span>  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="Trait"><a href="#Trait" class="headerlink" title="Trait"></a>Trait</h3><ul>
<li>A trait is declared like an abstract class, just with trait instead of abstract class.</li>
<li>On the other hand, traits cannot have (value) parameters, only classes can.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Planar</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">height</span></span>: <span class="type">Int</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">width</span></span>: <span class="type">Int</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">surface</span> </span>= height * width</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// One more superclass using trait.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> <span class="keyword">with</span> <span class="title">Planar</span> <span class="keyword">with</span> <span class="title">Movable</span> <span class="title">…</span></span></div></pre></td></tr></table></figure>
<h3 id="Scala’s-Class-Hierarchy"><a href="#Scala’s-Class-Hierarchy" class="headerlink" title="Scala’s Class Hierarchy"></a>Scala’s Class Hierarchy</h3><p><img src="scala_type_hierarchy.png" alt="Scala&#39;s class hierachy"></p>
<ul>
<li>Top Types<ul>
<li><code>Any</code><ul>
<li>The base type of all types</li>
<li>Methods: ==, !=, equals, hashCode, toString</li>
</ul>
</li>
<li><code>AnyRef</code><ul>
<li>The base type of all reference types</li>
<li>Alias of java.lang.Object</li>
</ul>
</li>
<li><code>AnyVal</code><ul>
<li>The base type of all primitive types</li>
</ul>
</li>
</ul>
</li>
<li>Bottom Type<ul>
<li><code>Nothing</code><ul>
<li>To signal abnormal termination</li>
<li>As an element type of empty collections</li>
</ul>
</li>
</ul>
</li>
<li><p>The Null Type </p>
<ul>
<li>Every reference class type also has null as a value.</li>
<li><code>null</code> is <code>Null</code>.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> x = <span class="literal">null</span>          <span class="comment">// x: Null</span></div><div class="line"><span class="keyword">val</span> y: <span class="type">String</span> = <span class="literal">null</span>  <span class="comment">// y: String</span></div><div class="line"><span class="keyword">val</span> z: <span class="type">Int</span> = <span class="literal">null</span>     <span class="comment">// error: type mismatch</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Imperative-Programming"><a href="#Imperative-Programming" class="headerlink" title="Imperative Programming"></a>Imperative Programming</h2><ul>
<li>Until now, our programs have been side-effect free.</li>
<li>Therefore, the concept of time wasn’t important.</li>
<li>For all programs that terminate, any sequence of actions would have given the same results.</li>
<li>This was also reflected in the substitution model of computation.</li>
</ul>
<h3 id="Reminder-Substitution-Model"><a href="#Reminder-Substitution-Model" class="headerlink" title="Reminder: Substitution Model"></a>Reminder: Substitution Model</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">iterate</span></span>(n: <span class="type">Int</span>, f: <span class="type">Int</span> =&gt; <span class="type">Int</span>, x: <span class="type">Int</span>) =</div><div class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) x <span class="keyword">else</span> iterate(n - <span class="number">1</span>, f, f(x))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span></span>(x: <span class="type">Int</span>) = x * x</div></pre></td></tr></table></figure>
<ul>
<li><p>The call iterate(1, square, 3) gets rewritten as follows.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">iterate(<span class="number">1</span>, square, <span class="number">3</span>)</div><div class="line"><span class="keyword">if</span> (<span class="number">1</span> == <span class="number">0</span>) <span class="number">3</span> <span class="keyword">else</span> iterate(<span class="number">1</span> - <span class="number">1</span>, square, square(<span class="number">3</span>))</div><div class="line">iterate(<span class="number">0</span>, square, square(<span class="number">3</span>))</div><div class="line">iterate(<span class="number">0</span>, square, <span class="number">3</span> * <span class="number">3</span>)</div><div class="line">iterate(<span class="number">0</span>, square, <span class="number">9</span>)</div><div class="line"><span class="keyword">if</span> (<span class="number">0</span> == <span class="number">0</span>) <span class="number">9</span> <span class="keyword">else</span> iterate(<span class="number">0</span> - <span class="number">1</span>, square, square(<span class="number">9</span>))</div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure>
</li>
<li><p>Rewriting can be done anywhere in a term, and all rewritings which terminate lead to the same solution.</p>
</li>
<li>This is an important result of the λ-calculus, the theory behind functional programming.</li>
</ul>
<h3 id="Stateful-Object"><a href="#Stateful-Object" class="headerlink" title="Stateful Object"></a>Stateful Object</h3><ul>
<li>An object has a state if its behavior is influenced by its history.</li>
</ul>
<h3 id="Implementation-of-State"><a href="#Implementation-of-State" class="headerlink" title="Implementation of State"></a>Implementation of State</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x: <span class="type">String</span> = <span class="string">"abc"</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">111</span></div><div class="line"></div><div class="line">x = <span class="string">"hi"</span></div><div class="line">count = count + <span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="State-in-Objects"><a href="#State-in-Objects" class="headerlink" title="State in Objects"></a>State in Objects</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> balance = <span class="number">0</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">deposit</span></span>(amount: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</div><div class="line">    <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) balance = balance + amount</div><div class="line">    balance</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span></span>(amount: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> &lt; amount &amp;&amp; amount &lt;= balance) &#123;</div><div class="line">      balance = balance - amount</div><div class="line">      balance</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">"insufficient funds"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// accounts are stateful objects.</span></div><div class="line"><span class="keyword">val</span> account = <span class="keyword">new</span> <span class="type">BankAccount</span></div><div class="line"></div><div class="line">account deposit <span class="number">50</span>  </div><div class="line">account withdraw <span class="number">20</span> <span class="comment">// res1: Int = 30</span></div><div class="line">account withdraw <span class="number">20</span> <span class="comment">// res2: Int = 10</span></div><div class="line">account withdraw <span class="number">15</span> <span class="comment">// java.lang.Error: insufficient funds</span></div></pre></td></tr></table></figure>
<h3 id="Identity-and-Change"><a href="#Identity-and-Change" class="headerlink" title="Identity and Change"></a>Identity and Change</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// x and y are the same.</span></div><div class="line"><span class="keyword">val</span> x = <span class="type">E</span>; <span class="keyword">val</span> y = <span class="type">E</span></div><div class="line"></div><div class="line"><span class="comment">// x and y are the same. (referential transparency)</span></div><div class="line"><span class="keyword">val</span> x = <span class="type">E</span>; <span class="keyword">val</span> y = x</div><div class="line"></div><div class="line"><span class="comment">// The two formulations are different.</span></div><div class="line"><span class="keyword">val</span> x = <span class="keyword">new</span> <span class="type">BankAccount</span></div><div class="line"><span class="keyword">val</span> y = <span class="keyword">new</span> <span class="type">BankAccount</span></div></pre></td></tr></table></figure>
<h3 id="Operational-Equivalence"><a href="#Operational-Equivalence" class="headerlink" title="Operational Equivalence"></a>Operational Equivalence</h3><ul>
<li>The precise meaning of “being the same” is defined by the property of operational equivalence.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> x = <span class="keyword">new</span> <span class="type">BankAccount</span></div><div class="line"><span class="keyword">val</span> y = <span class="keyword">new</span> <span class="type">BankAccount</span></div><div class="line">x deposit <span class="number">30</span></div><div class="line">y withdraw <span class="number">20</span>   <span class="comment">// java.lang.Error: insufficient funds</span></div><div class="line"></div><div class="line"><span class="comment">// Rename all occurrences of y with x in this sequence. </span></div><div class="line"><span class="keyword">val</span> x = <span class="keyword">new</span> <span class="type">BankAccount</span></div><div class="line"><span class="keyword">val</span> y = <span class="keyword">new</span> <span class="type">BankAccount</span></div><div class="line">x deposit <span class="number">30</span></div><div class="line">x withdraw <span class="number">20</span>   <span class="comment">// 10</span></div><div class="line"><span class="comment">// The final results are different. x and y are not the same.</span></div><div class="line"></div><div class="line"><span class="comment">// x and y are the same in this case but substitution cannot be used.</span></div><div class="line"><span class="keyword">val</span> x = <span class="keyword">new</span> <span class="type">BankAccount</span></div><div class="line"><span class="keyword">val</span> y = x</div></pre></td></tr></table></figure>
<h3 id="Imperative-Loops"><a href="#Imperative-Loops" class="headerlink" title="Imperative Loops"></a>Imperative Loops</h3><ul>
<li><p>While-Loops</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span></span>(x: <span class="type">Double</span>, exp: <span class="type">Int</span>): <span class="type">Double</span> = &#123;</div><div class="line">  <span class="keyword">var</span> r = <span class="number">1.0</span></div><div class="line">  <span class="keyword">var</span> i = exp</div><div class="line">  <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123; r = r * x; i = i - <span class="number">1</span> &#125;</div><div class="line">  r</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>For-Loops</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (i &lt;- <span class="number">1</span> until <span class="number">3</span>) &#123; print(i + <span class="string">" "</span>) &#125;</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// foreach is defined with elements of type A.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreach</span></span>(f: <span class="type">A</span> =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = ...</div><div class="line"></div><div class="line"><span class="string">"abc"</span>.foreach(i =&gt; println(<span class="string">s"<span class="subst">$i</span>"</span>))</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i &lt;- <span class="number">1</span> until <span class="number">3</span>; j &lt;- <span class="string">"abc"</span>) println(<span class="string">s"<span class="subst">$i</span> <span class="subst">$j</span>"</span>)</div><div class="line"><span class="comment">// Translates to</span></div><div class="line">(<span class="number">1</span> until <span class="number">3</span>) foreach (i =&gt; <span class="string">"abc"</span> foreach (j =&gt; println(<span class="string">s"<span class="subst">$i</span> <span class="subst">$j</span>"</span>)))</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Classes-VS-Case-Classes"><a href="#Classes-VS-Case-Classes" class="headerlink" title="Classes VS Case Classes"></a>Classes VS Case Classes</h2><ul>
<li><p>Creation and manipulation</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> balance = <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">deposit</span></span>(amount: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) balance = balance + amount</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span></span>(amount: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> &lt; amount &amp;&amp; amount &lt;= balance) &#123;</div><div class="line">      balance = balance - amount</div><div class="line">      balance</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">"insufficient funds"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Note</span>(<span class="params">name: <span class="type">String</span>, duration: <span class="type">String</span>, octave: <span class="type">Int</span></span>)</span></div><div class="line"></div><div class="line"><span class="comment">// A class instance requires new.</span></div><div class="line"><span class="keyword">val</span> aliceAccount = <span class="keyword">new</span> <span class="type">BankAccount</span></div><div class="line"><span class="keyword">val</span> c3 = <span class="type">Note</span>(<span class="string">"C"</span>, <span class="string">"Quarter"</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment">// The case class constructor parameters are promoted to members.</span></div><div class="line">c3.name   <span class="comment">// "C"</span></div></pre></td></tr></table></figure>
</li>
<li><p>Equality</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The value of BankAccount can change over time whereas the value of a Note is immutable.</span></div><div class="line"><span class="keyword">val</span> aliceAccount = <span class="keyword">new</span> <span class="type">BankAccount</span></div><div class="line"><span class="keyword">val</span> bobAccount = <span class="keyword">new</span> <span class="type">BankAccount</span></div><div class="line"></div><div class="line">aliceAccount == bobAccount  <span class="comment">// false </span></div><div class="line"></div><div class="line"><span class="comment">// </span></div><div class="line"><span class="keyword">val</span> c3 = <span class="type">Note</span>(<span class="string">"C"</span>, <span class="string">"Quarter"</span>, <span class="number">3</span>)</div><div class="line"><span class="keyword">val</span> cThree = <span class="type">Note</span>(<span class="string">"C"</span>, <span class="string">"Quarter"</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">c3 == cThree                <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
<li><p>Pattern matching</p>
<ul>
<li>Pattern matching can be used to extract information from a case class</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">c3 <span class="keyword">match</span> &#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Note</span>(name, duration, octave) =&gt; <span class="string">s"The duration is <span class="subst">$duration</span>"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Extensibility</p>
<ul>
<li>A class can extend another class, whereas a case class can not extend another case class.</li>
</ul>
</li>
<li><p>Case classes encoding</p>
<ul>
<li>Case classes are just a special case of classes, whose purpose is to aggregate several values into a single value.</li>
<li>When we define a case class, the Scala compiler defines a class enhanced with some more methods and a companion object.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Note</span>(<span class="params">name: <span class="type">String</span>, duration: <span class="type">String</span>, octave: <span class="type">Int</span></span>)</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Note</span>(<span class="params">_name: <span class="type">String</span>, _duration: <span class="type">String</span>, _octave: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// Constructor parameters are promoted to members</span></div><div class="line">  <span class="keyword">val</span> name = _name</div><div class="line">  <span class="keyword">val</span> duration = _duration</div><div class="line">  <span class="keyword">val</span> octave = _octave</div><div class="line"></div><div class="line">  <span class="comment">// Equality redefinition</span></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">equals</span></span>(other: <span class="type">Any</span>): <span class="type">Boolean</span> = other <span class="keyword">match</span> &#123;</div><div class="line">    <span class="keyword">case</span> that: <span class="type">Note</span> =&gt;</div><div class="line">      (that canEqual <span class="keyword">this</span>) &amp;&amp;</div><div class="line">        name == that.name &amp;&amp;</div><div class="line">        duration == that.duration &amp;&amp;</div><div class="line">        octave == that.octave</div><div class="line">    <span class="keyword">case</span> _ =&gt; <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">canEqual</span></span>(other: <span class="type">Any</span>): <span class="type">Boolean</span> = other.isInstanceOf[<span class="type">Note</span>]</div><div class="line"></div><div class="line">  <span class="comment">// Java hashCode redefinition according to equality</span></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">hashCode</span></span>(): <span class="type">Int</span> = &#123;</div><div class="line">    <span class="keyword">val</span> state = <span class="type">Seq</span>(name, duration, octave)</div><div class="line">    state.map(_.hashCode()).foldLeft(<span class="number">0</span>)((a, b) =&gt; <span class="number">31</span> * a + b)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// toString redefinition to return the value of an instance instead of its memory addres</span></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">s"Note(<span class="subst">$name</span>,<span class="subst">$duration</span>,<span class="subst">$octave</span>)"</span></div><div class="line"></div><div class="line">  <span class="comment">// Create a copy of a case class, with potentially modified field values</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">copy</span></span>(name: <span class="type">String</span> = name, duration: <span class="type">String</span> = duration, octave: <span class="type">Int</span> = octave): <span class="type">Note</span> =</div><div class="line">    <span class="keyword">new</span> <span class="type">Note</span>(name, duration, octave)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Note</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// Constructor that allows the omission of the `new` keyword</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(name: <span class="type">String</span>, duration: <span class="type">String</span>, octave: <span class="type">Int</span>): <span class="type">Note</span> =</div><div class="line">    <span class="keyword">new</span> <span class="type">Note</span>(name, duration, octave)</div><div class="line"></div><div class="line">  <span class="comment">// Extractor for pattern matching</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unapply</span></span>(note: <span class="type">Note</span>): <span class="type">Option</span>[(<span class="type">String</span>, <span class="type">String</span>, <span class="type">Int</span>)] =</div><div class="line">    <span class="keyword">if</span> (note eq <span class="literal">null</span>) <span class="type">None</span></div><div class="line">    <span class="keyword">else</span> <span class="type">Some</span>((note.name, note.duration, note.octave))</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> c3 = <span class="type">Note</span>(<span class="string">"C"</span>, <span class="string">"Quarter"</span>, <span class="number">3</span>)</div><div class="line">c3.toString   <span class="comment">// "Note(C,Quarter,3)" </span></div><div class="line"><span class="keyword">val</span> d = <span class="type">Note</span>(<span class="string">"D"</span>, <span class="string">"Quarter"</span>, <span class="number">3</span>)</div><div class="line">c3.equals(d)  <span class="comment">// false </span></div><div class="line"><span class="keyword">val</span> c4 = c3.copy(octave = <span class="number">4</span>)</div><div class="line">c4.toString   <span class="comment">// "Note(C,Quarter,4)"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Polymorphic-Types"><a href="#Polymorphic-Types" class="headerlink" title="Polymorphic Types"></a>Polymorphic Types</h2><ul>
<li><p>Type parameter</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Set</span>[<span class="type">A</span>] </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">incl</span></span>(a: <span class="type">A</span>): <span class="type">Set</span>[<span class="type">A</span>]</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">contains</span></span>(a: <span class="type">A</span>): <span class="type">Boolean</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span>[<span class="type">A</span>] <span class="keyword">extends</span> <span class="title">Set</span>[<span class="type">A</span>] </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonEmpty</span>[<span class="type">A</span>](<span class="params">elem: <span class="type">A</span>, left: <span class="type">Set</span>[<span class="type">A</span>], right: <span class="type">Set</span>[<span class="type">A</span>]</span>) <span class="keyword">extends</span> <span class="title">Set</span>[<span class="type">A</span>] </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Generic functions</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span></span>[<span class="type">A</span>](elem: <span class="type">A</span>) = <span class="keyword">new</span> <span class="type">NonEmpty</span>[<span class="type">A</span>](elem, <span class="keyword">new</span> <span class="type">Empty</span>[<span class="type">A</span>], <span class="keyword">new</span> <span class="type">Empty</span>[<span class="type">A</span>])</div><div class="line"></div><div class="line">singleton[<span class="type">Int</span>](<span class="number">1</span>)</div><div class="line">singleton[<span class="type">Boolean</span>](<span class="literal">true</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>Type inference</p>
<ul>
<li>The Scala compiler can usually deduce the correct type parameters from the value arguments of a function call.</li>
<li>So, in most cases, type parameters can be left out.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">singleton(<span class="number">1</span>)</div><div class="line">singleton(<span class="literal">true</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>Types and Evaluation </p>
<ul>
<li>We can assume that all type parameters and type arguments are removed before evaluating the program.</li>
<li>This is also called <code>type erasure</code>.<ul>
<li>include Java, Scala, Haskell, ML, OCaml</li>
<li>not include C++, C#, F#</li>
</ul>
</li>
</ul>
</li>
<li><p>Polymorphism</p>
<ul>
<li>In programming it means that<ul>
<li>the function can be applied to arguments of many types, or</li>
<li>the type can have instances of many types.</li>
</ul>
</li>
<li>We have seen two principal forms of polymorphism:<ul>
<li>subtyping: instances of a subclass can be passed to a base class</li>
<li>generics: instances of a function or class are created by type parameterization.</li>
</ul>
</li>
</ul>
<p><img src="animals.png" alt="Animal"></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fitness</span></span>: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Reptile</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Mammal</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Zebra</span> <span class="keyword">extends</span> <span class="title">Mammal</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">zebraCount</span></span>: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Giraffe</span> <span class="keyword">extends</span> <span class="title">Mammal</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>Type bounds</p>
<ul>
<li><code>A &lt;: B</code> means: A is a subtype of B. <em>(Upper bound)</em></li>
<li><code>A &gt;: B</code> means: A is a supertype of B, or B is a subtype of A. <em>(Lower bound)</em></li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// A can be instantiated only to types that conform to Animal.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection</span></span>[<span class="type">A</span> &lt;: <span class="type">Animal</span>](a1: <span class="type">A</span>, a2: <span class="type">A</span>): <span class="type">A</span> =</div><div class="line">  <span class="keyword">if</span> (a1.fitness &gt; a2.fitness) a1 <span class="keyword">else</span> a2</div><div class="line"></div><div class="line"><span class="comment">// A could be one of Reptile, Animal, AnyRef, or Any.</span></div><div class="line"><span class="type">A</span> &gt;: <span class="type">Reptile</span></div><div class="line"></div><div class="line"><span class="comment">// Mixed bound</span></div><div class="line"><span class="comment">// A any type on the interval between Zebra and Animal.</span></div><div class="line"><span class="type">A</span> &gt;: <span class="type">Zebra</span> &lt;: <span class="type">Animal</span></div></pre></td></tr></table></figure>
</li>
<li><p>Covariance</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> zebras: <span class="type">Array</span>[<span class="type">Zebra</span>] = <span class="type">Array</span>(<span class="keyword">new</span> <span class="type">Zebra</span>)</div><div class="line"><span class="keyword">val</span> mammals: <span class="type">Array</span>[<span class="type">Mammal</span>] = zebras</div><div class="line">mammals(<span class="number">0</span>) = <span class="keyword">new</span> <span class="type">Giraffe</span></div><div class="line"><span class="keyword">val</span> zebra: <span class="type">Zebra</span> = zebras(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment">// error at line 2:</span></div><div class="line"><span class="comment">// type mismatch;</span></div><div class="line"><span class="comment">// found: Array[Zebra]</span></div><div class="line"><span class="comment">// required: Array[Mammal]</span></div></pre></td></tr></table></figure>
<ul>
<li>A type that accepts mutations of its elements should not be covariant.</li>
<li>But immutable types can be covariant, if some conditions on methods are met.</li>
</ul>
</li>
<li><p>Definition of variance</p>
<ul>
<li><p><code>C[T]</code> is a parameterized type and <code>A</code>, <code>B</code> are types such that <code>A &lt;: B</code>.</p>
<ul>
<li><code>C</code> is <em>covariant</em>,<ul>
<li><code>C[A] &lt;: C[B]</code></li>
<li><code>class C[+A] { … }</code></li>
</ul>
</li>
<li><code>C</code> is <em>contravariant</em><ul>
<li><code>C[A] &gt;: C[B]</code></li>
<li><code>class C[-A] { … }</code></li>
</ul>
</li>
<li><code>C</code> is <em>nonvariant</em>.<ul>
<li>neither <code>C[A]</code> nor <code>C[B]</code> is a subtype of the other.</li>
<li><code>class C[A] { … }</code></li>
</ul>
</li>
</ul>
</li>
<li><p>If <code>A2 &lt;: A1</code> and <code>B1 &lt;: B2</code>, then <code>A1 =&gt; B1 &lt;: A2 =&gt; B2</code>.</p>
</li>
<li><p><em>Covariant</em> type parameters can only appear in method results.</p>
</li>
<li><em>Contravariant</em> type parameters can only appear in method parameters.</li>
<li><em>Invariant</em> type parameters can appear anywhere.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Function1</span>[-<span class="type">T</span>, +<span class="type">U</span>] </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">T</span>): <span class="type">U</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Contravariance example </p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Vet[Mammal] &lt;: Vet[Zebra]</span></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Vet</span>[<span class="type">A</span>] </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">treat</span></span>(a: <span class="type">A</span>): <span class="type">Unit</span> <span class="comment">// Treats an animal of type `A`</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Making classes covariant</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This does not work.</span></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Stream</span>[+<span class="type">T</span>] </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">prepend</span></span>(elem: <span class="type">T</span>): <span class="type">Stream</span>[<span class="type">T</span>] = <span class="type">Stream</span>.cons(elem, <span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Variance-correct (use lower bound)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepend</span></span>[<span class="type">U</span> &gt;: <span class="type">T</span>](elem: <span class="type">U</span>): <span class="type">Stream</span>[<span class="type">U</span>] = <span class="type">Stream</span>.cons(elem, <span class="keyword">this</span>)</div></pre></td></tr></table></figure>
<ul>
<li>This passes variance checks, because:<ul>
<li><code>covariant</code> type parameters may appear in lower bounds of method type parameters</li>
<li><code>contravariant</code> type parameters may appear in upper bounds of method</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Lazy-Evaluation"><a href="#Lazy-Evaluation" class="headerlink" title="Lazy Evaluation"></a>Lazy Evaluation</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((<span class="number">1000</span> to <span class="number">10000</span>) filter isPrime)(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<ul>
<li><p>It constructs all prime numbers between 1000 and 10000 in a list, but only ever looks at the first two elements of that list.</p>
</li>
<li><p><code>Stream</code></p>
<ul>
<li>Streams are similar to lists, but their tail is evaluated only on demand.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> xs = <span class="type">Stream</span>.cons(<span class="number">1</span>, <span class="type">Stream</span>.cons(<span class="number">2</span>, <span class="type">Stream</span>.empty))</div></pre></td></tr></table></figure>
</li>
<li><p>Stream ranges</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">streamRange</span></span>(lo: <span class="type">Int</span>, hi: <span class="type">Int</span>): <span class="type">Stream</span>[<span class="type">Int</span>] =</div><div class="line">  <span class="keyword">if</span> (lo &gt;= hi) <span class="type">Stream</span>.empty</div><div class="line">  <span class="keyword">else</span> <span class="type">Stream</span>.cons(lo, streamRange(lo + <span class="number">1</span>, hi))</div></pre></td></tr></table></figure>
<ul>
<li>streamRange(start, end) returns a single object of type Stream with start as head element.<ul>
<li>The other elements are only computed when they are needed, where “needed” means that someone calls tail on the stream.</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">listRange</span></span>(lo: <span class="type">Int</span>, hi: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">Int</span>] =</div><div class="line">  <span class="keyword">if</span> (lo &gt;= hi) <span class="type">Nil</span></div><div class="line">  <span class="keyword">else</span> lo :: listRange(lo + <span class="number">1</span>, hi)</div></pre></td></tr></table></figure>
<ul>
<li>listRange(start, end) will produce a list with end - start elements and return it.</li>
</ul>
</li>
<li><p>Methods of streams</p>
<ul>
<li>Stream supports almost all methods of List.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(streamRange(<span class="number">1000</span>, <span class="number">10000</span>) filter isPrime)(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">// #:: produces a stream.</span></div><div class="line">x #:: xs == <span class="type">Stream</span>.cons(x, xs)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Stream</span>[+<span class="type">T</span>] <span class="keyword">extends</span> <span class="title">Seq</span>[<span class="type">T</span>] </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span></span>: <span class="type">Boolean</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">head</span></span>: <span class="type">T</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">tail</span></span>: <span class="type">Stream</span>[<span class="type">T</span>]</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Stream</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cons</span></span>[<span class="type">T</span>](hd: <span class="type">T</span>, tl: =&gt; <span class="type">Stream</span>[<span class="type">T</span>]) = <span class="keyword">new</span> <span class="type">Stream</span>[<span class="type">T</span>] &#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span> </span>= <span class="literal">false</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">head</span> </span>= hd</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tail</span> </span>= tl</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">"Stream("</span> + hd + <span class="string">", ?)"</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">val</span> empty = <span class="keyword">new</span> <span class="type">Stream</span>[<span class="type">Nothing</span>] &#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span> </span>= <span class="literal">true</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">head</span> </span>= <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NoSuchElementException</span>(<span class="string">"empty.head"</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tail</span> </span>= <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NoSuchElementException</span>(<span class="string">"empty.tail"</span>)</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">"Stream()"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>the type of <code>tl</code> starts with <code>=&gt;</code>. In such a case, this parameter is evaluated by following the rules of the <em>call-by-name</em> model.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rec = <span class="number">0</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">streamRange</span></span>(lo: <span class="type">Int</span>, hi: <span class="type">Int</span>): <span class="type">Stream</span>[<span class="type">Int</span>] = &#123;</div><div class="line">  rec = rec + <span class="number">1</span></div><div class="line">  <span class="keyword">if</span> (lo &gt;= hi) <span class="type">Stream</span>.empty</div><div class="line">  <span class="keyword">else</span> <span class="type">Stream</span>.cons(lo, streamRange(lo + <span class="number">1</span>, hi))</div><div class="line">&#125;</div><div class="line">streamRange(<span class="number">1</span>, <span class="number">10</span>).take(<span class="number">3</span>).toList</div><div class="line">rec   <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<ul>
<li><p>Lazy evaluation</p>
<ul>
<li>The proposed Stream implementation suffers from a serious potential performance problem: If tail is called several times, the corresponding stream will be recomputed each time.</li>
<li>This problem can be avoided by storing the result of the first evaluation of tail and re-using the stored result instead of recomputing tail.</li>
<li>We call this scheme <em>lazy evaluation</em> (as opposed to by-name evaluation in the case where everything is recomputed, and strict evaluation for normal parameters and val definitions.)</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> x = expr</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cons</span></span>[<span class="type">T</span>](hd: <span class="type">T</span>, tl: =&gt; <span class="type">Stream</span>[<span class="type">T</span>]) = <span class="keyword">new</span> <span class="type">Stream</span>[<span class="type">T</span>] &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">head</span> </span>= hd</div><div class="line">  <span class="keyword">lazy</span> <span class="keyword">val</span> tail = tl</div><div class="line">  …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> builder = <span class="keyword">new</span> <span class="type">StringBuilder</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> x = &#123; builder += 'x'; <span class="number">1</span> &#125;</div><div class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> y = &#123; builder += 'y'; <span class="number">2</span> &#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span> </span>= &#123; builder += 'z'; <span class="number">3</span> &#125;</div><div class="line"></div><div class="line">z + y + x + z + y + x   <span class="comment">// 12</span></div><div class="line">builder.result()        <span class="comment">// "xzyz"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Type-Classes"><a href="#Type-Classes" class="headerlink" title="Type Classes"></a>Type Classes</h2><ul>
<li><p>Parameterization of sort</p>
<ul>
<li>The most flexible design is to make the function <code>insertionSort</code> polymorphic and to pass the comparison operation as an additional parameter.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertionSort</span></span>[<span class="type">T</span>](xs: <span class="type">List</span>[<span class="type">T</span>])(lessThan: (<span class="type">T</span>, <span class="type">T</span>) =&gt; <span class="type">Boolean</span>) = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(y: <span class="type">Int</span>, ys: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">Int</span>] =</div><div class="line">    ys <span class="keyword">match</span> &#123;</div><div class="line">      …</div><div class="line">      <span class="keyword">case</span> z :: zs =&gt;</div><div class="line">        <span class="keyword">if</span> (lessThan(y, z)) y :: z :: zs</div><div class="line">        <span class="keyword">else</span> …</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  xs <span class="keyword">match</span> &#123;</div><div class="line">    …</div><div class="line">    <span class="keyword">case</span> y :: ys =&gt; insert(y, insertionSort(ys)(lessThan))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> nums = <span class="type">List</span>(<span class="number">-5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>)</div><div class="line"><span class="keyword">val</span> fruit = <span class="type">List</span>(<span class="string">"apple"</span>, <span class="string">"pear"</span>, <span class="string">"orange"</span>, <span class="string">"pineapple"</span>)</div><div class="line"></div><div class="line">insertionSort(nums)((x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x &lt; y)</div><div class="line">insertionSort(fruit)((x: <span class="type">String</span>, y: <span class="type">String</span>) =&gt; x.compareTo(y) &lt; <span class="number">0</span>)</div><div class="line"><span class="comment">// Parameter types can be inferred.</span></div><div class="line">insertionSort(nums)((x, y) =&gt; x &lt; y)</div></pre></td></tr></table></figure>
</li>
<li><p>Parameterization with ordered</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// scala.math.Ordering[T] (standard library that represents orderings.)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertionSort</span></span>[<span class="type">T</span>](xs: <span class="type">List</span>[<span class="type">T</span>])(ord: <span class="type">Ordering</span>[<span class="type">T</span>]): <span class="type">List</span>[<span class="type">T</span>] = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(y: <span class="type">Int</span>, ys: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">Int</span>] =</div><div class="line">    … <span class="keyword">if</span> (ord.lt(y, z)) …</div><div class="line"></div><div class="line">  … insert(y, insertionSort(ys)(ord)) …</div><div class="line">&#125;</div><div class="line"></div><div class="line">insertionSort(nums)(<span class="type">Ordering</span>.<span class="type">Int</span>)</div><div class="line">insertionSort(fruits)(<span class="type">Ordering</span>.<span class="type">String</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>Implicit parameters</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertionSort</span></span>[<span class="type">T</span>](xs: <span class="type">List</span>[<span class="type">T</span>])(<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">T</span>]): <span class="type">List</span>[<span class="type">T</span>] = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(y: <span class="type">Int</span>, ys: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">Int</span>] =</div><div class="line">    … <span class="keyword">if</span> (ord.lt(y, z)) …</div><div class="line"></div><div class="line">  … insert(y, insertionSort(ys)) …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// The compiler will figure out the right implicit to pass based on the demanded type.</span></div><div class="line">insertionSort(nums)</div><div class="line">insertionSort(fruits)</div></pre></td></tr></table></figure>
<ul>
<li>The compiler will search an implicit definition that<ul>
<li>is marked implicit</li>
<li>has a type compatible with T</li>
<li>is visible at the point of the function call, or is defined in a companion object associated with T.</li>
</ul>
</li>
</ul>
</li>
<li><p>Type classes</p>
<ul>
<li>The combination of types parameterized and implicit parameters is also called type classes.</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">gcd</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span> (b == <span class="number">0</span>) a <span class="keyword">else</span> gcd(b, a % b)</div><div class="line">  <span class="keyword">private</span> <span class="keyword">val</span> g = gcd(x, y)</div><div class="line"></div><div class="line">  <span class="keyword">lazy</span> <span class="keyword">val</span> numer: <span class="type">Int</span> = x / g</div><div class="line">  <span class="keyword">lazy</span> <span class="keyword">val</span> denom: <span class="type">Int</span> = y / g</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> compareRationals: (<span class="type">Rational</span>, <span class="type">Rational</span>) =&gt; <span class="type">Int</span> = (x, y) =&gt; x.numer * y.denom - x.denom * y.numer</div><div class="line"></div><div class="line"><span class="keyword">implicit</span> <span class="keyword">val</span> rationalOrder: <span class="type">Ordering</span>[<span class="type">Rational</span>] =</div><div class="line">  <span class="keyword">new</span> <span class="type">Ordering</span>[<span class="type">Rational</span>] &#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(x: <span class="type">Rational</span>, y: <span class="type">Rational</span>): <span class="type">Int</span> = compareRationals(x, y)</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> half = <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">val</span> third = <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">3</span>)</div><div class="line"><span class="keyword">val</span> fourth = <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">4</span>)</div><div class="line"><span class="keyword">val</span> rationals = <span class="type">List</span>(third, half, fourth)</div><div class="line">insertionSort(rationals)    <span class="comment">// List(fourth, third, half)</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Scala-Basics&quot;&gt;&lt;a href=&quot;#Scala-Basics&quot; class=&quot;headerlink&quot; title=&quot;Scala Basics&quot;&gt;&lt;/a&gt;Scala Basics&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://
    
    </summary>
    
      <category term="Scala" scheme="http://blog.jhko.me/categories/Scala/"/>
    
    
      <category term="basic" scheme="http://blog.jhko.me/tags/basic/"/>
    
      <category term="scala" scheme="http://blog.jhko.me/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>제이쿼리(jQuery) 기초</title>
    <link href="http://blog.jhko.me/2017/07/25/jquery-basics/"/>
    <id>http://blog.jhko.me/2017/07/25/jquery-basics/</id>
    <published>2017-07-25T07:52:56.000Z</published>
    <updated>2017-11-26T17:39:37.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-Basics"><a href="#jQuery-Basics" class="headerlink" title="jQuery Basics"></a>jQuery Basics</h1><blockquote>
<p>jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript. - <a href="http://jquery.com" target="_blank" rel="external">jQuery.com</a></p>
</blockquote>
<ul>
<li><strong>Why use jQuery?</strong><ul>
<li>Fixes “broken” DOM API</li>
<li>Brevity and clarity</li>
<li>Ease of use</li>
<li>Cross-browser support</li>
<li>Ajax</li>
<li>Lot’s of people use jQuery.</li>
</ul>
</li>
<li><strong>Why not use jQuery?</strong><ul>
<li>The DOM API is no longer “broken”.</li>
<li>It doesn’t do anything you can’t do on your own.</li>
<li>It’s an unnecessary dependency.</li>
<li>Performance</li>
<li>Lot’s of people are moving away from jQuery.</li>
</ul>
</li>
</ul>
<h2 id="Add-jQuery"><a href="#Add-jQuery" class="headerlink" title="Add jQuery"></a>Add jQuery</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Selectors"><a href="#Selectors" class="headerlink" title="Selectors"></a>Selectors</h2><p>Select elements with $(“selector”)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// all img tags</span></div><div class="line">$(<span class="string">"img"</span>)</div><div class="line"></div><div class="line"><span class="comment">// all element with class "sale"</span></div><div class="line">$(<span class="string">".sale"</span>)</div><div class="line"></div><div class="line"><span class="comment">// element with id "bonus"</span></div><div class="line">$(<span class="string">"#bonus"</span>)</div><div class="line"></div><div class="line"><span class="comment">// all a tags inside of li's</span></div><div class="line">$(<span class="string">"li a"</span>)</div></pre></td></tr></table></figure>
<h2 id="Manipulating-style"><a href="#Manipulating-style" class="headerlink" title="Manipulating style"></a>Manipulating style</h2><p>$(“selector”).css(property, value)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#special"</span>).css(<span class="string">"border"</span>, <span class="string">"2px solid red"</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> styles = &#123;</div><div class="line">  <span class="attr">border</span>: <span class="string">"2px solid red"</span>,</div><div class="line">  <span class="attr">fontWeight</span>: <span class="string">"bold"</span></div><div class="line">&#125;</div><div class="line">$(<span class="string">"#special"</span>).css(styles);</div><div class="line"></div><div class="line">$(<span class="string">"div:first-of-type"</span>).css(<span class="string">"color"</span>, <span class="string">"pink"</span>);</div></pre></td></tr></table></figure>
<h2 id="Common-methods"><a href="#Common-methods" class="headerlink" title="Common methods"></a>Common methods</h2><h3 id="Text-and-html"><a href="#Text-and-html" class="headerlink" title="Text and html"></a>Text and html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo-container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Demo content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Get and set combined text contents</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"content"</span>).text();</div><div class="line"><span class="comment">// Output: Demo content first second</span></div><div class="line"></div><div class="line">$(<span class="string">"li"</span>).text(<span class="string">"Changed"</span>);</div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// &lt;div class="demo-container"&gt;</span></div><div class="line"><span class="comment">//   &lt;div class="content"&gt;Demo content&lt;/div&gt;</span></div><div class="line"><span class="comment">//   &lt;ul&gt;</span></div><div class="line"><span class="comment">//     &lt;li&gt;Changed&lt;/li&gt;</span></div><div class="line"><span class="comment">//     &lt;li&gt;Changed&lt;/li&gt;</span></div><div class="line"><span class="comment">//   &lt;/ul&gt;</span></div><div class="line"><span class="comment">// &lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Get and set HTML contents</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul"</span>).html();</div><div class="line"><span class="comment">// Output: &lt;li&gt;first&lt;/li&gt;  &lt;li&gt;second&lt;/li&gt;</span></div><div class="line"></div><div class="line">$(<span class="string">"ul"</span>).html(<span class="string">"&lt;li&gt;a new item&lt;/li&gt;"</span>);</div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// &lt;div class="demo-container"&gt;</span></div><div class="line"><span class="comment">//   &lt;div class="content"&gt;Demo content&lt;/div&gt;</span></div><div class="line"><span class="comment">//   &lt;ul&gt;</span></div><div class="line"><span class="comment">//     &lt;li&gt;a new item&lt;/li&gt;</span></div><div class="line"><span class="comment">//   &lt;/ul&gt;</span></div><div class="line"><span class="comment">// &lt;/div&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Attr-and-val"><a href="#Attr-and-val" class="headerlink" title="Attr and val"></a>Attr and val</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.gstatic.com/webp/gallery/1.jpg"</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Get and Set the value of an attribute for the first element.</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).attr(<span class="string">"src"</span>);</div><div class="line"><span class="comment">// Output: http://www.gstatic.com/webp/gallery/1.jpg</span></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).attr(<span class="string">"title"</span>, <span class="string">"This is sample"</span>);</div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// &lt;img src="http://www.gstatic.com/webp/gallery/1.jpg" title="This is sample"&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><a href="http://api.jquery.com/attr/" target="_blank" rel="external">attr() vs prop() (jQuery APi)</a><ul>
<li>To retrieve and change DOM properties such as the checked, selected, or disabled state of form elements, use the .prop() method. (related to boolean attributes)</li>
</ul>
</li>
</ul>
<p><strong>Get and set the values of the first form elements.</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"input"</span>).val();</div><div class="line">$(<span class="string">"input"</span>).val(<span class="string">"put something"</span>);</div></pre></td></tr></table></figure>
<h3 id="Manipulating-class"><a href="#Manipulating-class" class="headerlink" title="Manipulating class"></a>Manipulating class</h3><p><strong>Add and remove classes</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"p"</span>).addClass(<span class="string">"correct"</span>);</div><div class="line">$(<span class="string">"p"</span>).removeClass(<span class="string">"correct"</span>);</div><div class="line">$(<span class="string">"p"</span>).toggleClass(<span class="string">"correct"</span>);</div></pre></td></tr></table></figure>
<h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><h3 id="Click"><a href="#Click" class="headerlink" title="Click"></a>Click</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#submit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Complete submit"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">"#submit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="keyword">this</span>).css(<span class="string">"background"</span>, <span class="string">"blue"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://stackoverflow.com/questions/1051782/jquery-whats-the-difference-between-this-and-this" target="_blank" rel="external">jQuery: What’s the difference between ‘$(this)’ and ‘this’? (StackOverflow)</a><ul>
<li>Basically every time you get a set of elements back jQuery turns it into a jQuery object.</li>
</ul>
</li>
</ul>
<h3 id="Keypress"><a href="#Keypress" class="headerlink" title="Keypress"></a>Keypress</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"input"</span>).keypress(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(event.which === <span class="number">13</span>) &#123;</div><div class="line">    alert(<span class="string">"You hit enter"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><a href="http://howtodoinjava.com/scripting/jquery/jquery-difference-between-keypress-and-keydown-events/" target="_blank" rel="external">jQuery – Difference between Keypress and Keydown Events (HowToDoInJava)</a></li>
</ul>
<h3 id="On"><a href="#On" class="headerlink" title="On"></a>On</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"submit"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Clicked"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">"submit"</span>).on(<span class="string">"dblclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Clicked"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>click() only adds listeners for existing element.</li>
<li>on() will add listeners for all potential future elements.</li>
<li><a href="https://stackoverflow.com/questions/9122078/difference-between-onclick-vs-click" target="_blank" rel="external">Difference between .on(‘click’) vs .click() (StackOverflow)</a></li>
</ul>
<h2 id="Effects"><a href="#Effects" class="headerlink" title="Effects"></a>Effects</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"button"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">"div"</span>).fadeOut(<span class="number">1000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Fade Completed!"</span>); <span class="comment">// Callback function</span></div><div class="line">    $(<span class="keyword">this</span>).remove();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">"button"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">"div"</span>).slideUp();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jQuery-Basics&quot;&gt;&lt;a href=&quot;#jQuery-Basics&quot; class=&quot;headerlink&quot; title=&quot;jQuery Basics&quot;&gt;&lt;/a&gt;jQuery Basics&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;jQuery is a f
    
    </summary>
    
      <category term="Javascript" scheme="http://blog.jhko.me/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://blog.jhko.me/tags/javascript/"/>
    
      <category term="basic" scheme="http://blog.jhko.me/tags/basic/"/>
    
      <category term="jquery" scheme="http://blog.jhko.me/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>자바스크립트(Javascript) 기초</title>
    <link href="http://blog.jhko.me/2017/07/17/javascript-basics/"/>
    <id>http://blog.jhko.me/2017/07/17/javascript-basics/</id>
    <published>2017-07-17T10:48:58.000Z</published>
    <updated>2017-11-26T17:39:47.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javascript-Basics"><a href="#Javascript-Basics" class="headerlink" title="Javascript Basics"></a>Javascript Basics</h1><h2 id="Primitive-data-types"><a href="#Primitive-data-types" class="headerlink" title="Primitive data types"></a>Primitive data types</h2><h3 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span></div><div class="line"><span class="number">-1</span></div><div class="line"><span class="number">12.1</span></div><div class="line"></div><div class="line"><span class="number">3</span>+<span class="number">10</span>  <span class="comment">// 13</span></div><div class="line"><span class="number">1</span>/<span class="number">10</span>  <span class="comment">// 0.1</span></div><div class="line"><span class="number">10</span>%<span class="number">3</span>  <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">"Hello World"</span></div><div class="line"><span class="string">'Hello World'</span></div><div class="line"></div><div class="line"><span class="string">"abc"</span>+<span class="string">"def"</span>           <span class="comment">// abcdef</span></div><div class="line"><span class="string">"This is \"a dog\""</span>   <span class="comment">// This is "a dog"</span></div><div class="line"><span class="string">"Hello World"</span>.length  <span class="comment">// 11</span></div><div class="line"><span class="string">"hello"</span>[<span class="number">0</span>]            <span class="comment">// h</span></div><div class="line"><span class="string">"hi\\"</span>.length         <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<h3 id="Booleans"><a href="#Booleans" class="headerlink" title="Booleans"></a>Booleans</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure>
<h3 id="Null-and-undefined"><a href="#Null-and-undefined" class="headerlink" title="Null and undefined"></a>Null and undefined</h3><p><strong>Null</strong>: It can be assigned to a variable as a representation of no value. (Object)</p>
<p><strong>Undefined</strong>: A variable has been declared but has not yet been assigned a value. (A Type itself)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// null</span></div><div class="line"><span class="keyword">var</span> player = <span class="string">"Jihoon"</span>;</div><div class="line">player = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> name;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://stackoverflow.com/questions/5076944/what-is-the-difference-between-null-and-undefined-in-javascript" target="_blank" rel="external">What is the difference between null and undefined in JavaScript? (StackOverflow)</a></li>
</ul>
<h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"Jihoon"</span>;</div><div class="line"><span class="keyword">var</span> number = <span class="number">111</span>;</div><div class="line"><span class="keyword">var</span> isNumber = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Jihoon"</span>;</div><div class="line"><span class="string">"Hello "</span> + name       <span class="comment">// Hello Jihoon</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</div><div class="line">num + <span class="number">11</span> + <span class="number">10</span>         <span class="comment">// 121</span></div><div class="line"></div><div class="line"><span class="comment">// Dynamically Typed, and Weakly Typed.</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Jihoon"</span>;</div><div class="line">name = <span class="number">50</span>;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://stackoverflow.com/questions/964910/is-javascript-an-untyped-language" target="_blank" rel="external">Is JavaScript an untyped language? (StackOverflow)</a></li>
</ul>
<h2 id="Useful-built-in-methods"><a href="#Useful-built-in-methods" class="headerlink" title="Useful built-in methods"></a>Useful built-in methods</h2><ul>
<li>alert(“Message”);</li>
<li>console.log(“Message”);</li>
<li>prompt(“What is your name?”);<ul>
<li>var userName = prompt(“What is your name?”);</li>
</ul>
</li>
</ul>
<h2 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h2><h3 id="Boolean-logic"><a href="#Boolean-logic" class="headerlink" title="Boolean logic"></a>Boolean logic</h3><p>When x = 5,</p>
<table>
<thead>
<tr>
<th>Example</th>
<th>Result</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>x &gt; 10</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>x &gt;= 5</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>x &lt; -10</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>x == “5”</td>
<td>true</td>
<td>Equal to</td>
</tr>
<tr>
<td>x != “a”</td>
<td>true</td>
<td>Not equal to</td>
</tr>
<tr>
<td>x === “5”</td>
<td>false</td>
<td>Equal value and type</td>
</tr>
<tr>
<td>x !== “5”</td>
<td>true</td>
<td>Not equal value and equal type</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">x == <span class="string">"10"</span>;  <span class="comment">// ture</span></div><div class="line">x === <span class="string">"10"</span>; <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> y = <span class="literal">null</span>;</div><div class="line">y == <span class="literal">undefined</span>  <span class="comment">// true</span></div><div class="line">y === <span class="literal">undefined</span> <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="literal">true</span> == <span class="string">"1"</span>       <span class="comment">// true</span></div><div class="line"><span class="number">0</span> === <span class="literal">false</span>       <span class="comment">// true</span></div><div class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></div><div class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>        <span class="comment">// false (not a number)</span></div></pre></td></tr></table></figure>
<h3 id="Logical-operators"><a href="#Logical-operators" class="headerlink" title="Logical operators"></a>Logical operators</h3><table>
<thead>
<tr>
<th>Operator</th>
<th>Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;&amp;</td>
<td>AND</td>
</tr>
<tr>
<td>||</td>
<td>OR</td>
</tr>
<tr>
<td>!</td>
<td>NOT</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> y = <span class="string">"a"</span>;</div><div class="line"></div><div class="line">y === <span class="string">"b"</span> || x &gt;= <span class="number">10</span>  <span class="comment">// true</span></div><div class="line"></div><div class="line">x = <span class="number">3</span>;</div><div class="line">y = <span class="number">8</span>;</div><div class="line"></div><div class="line">!(x == <span class="string">"3"</span> || x === y) &amp;&amp; !(y != <span class="number">8</span> &amp;&amp; x &lt;= y) <span class="comment">// false</span></div><div class="line"></div><div class="line"></div><div class="line">!<span class="string">"Hello World"</span>  <span class="comment">// false</span></div><div class="line">!!<span class="string">""</span>            <span class="comment">// false</span></div><div class="line">!!<span class="literal">null</span>          <span class="comment">// false</span></div><div class="line">!!<span class="number">0</span>             <span class="comment">// false</span></div><div class="line">!!<span class="literal">NaN</span>           <span class="comment">// false</span></div><div class="line">!!<span class="number">-1</span>            <span class="comment">// true</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> msg = <span class="string">"hello"</span></div><div class="line"><span class="keyword">var</span> isFunny = <span class="string">"false"</span></div><div class="line"></div><div class="line">!((str || msg  &amp;&amp; isFunny)) <span class="comment">// false</span></div></pre></td></tr></table></figure>
<ul>
<li><a href="https://developer.mozilla.org/ko/docs/Glossary/Truthy" target="_blank" rel="external">Truthy (MDN)</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy" target="_blank" rel="external">Falsy (MDN)</a></li>
</ul>
<h3 id="Conditionals"><a href="#Conditionals" class="headerlink" title="Conditionals"></a>Conditionals</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Sorry, you are not old enough."</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (age &lt; <span class="number">21</span>) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"You can enter, but cannot drink."</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Come on in. You can drink."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> guess = prompt(<span class="string">"Guess a number"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="built_in">Number</span>(guess) === <span class="number">10</span>) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Right!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.w3schools.com/jsref/jsref_number.asp" target="_blank" rel="external">JavaScript Number() Function</a></li>
</ul>
<h3 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (count &lt; <span class="number">4</span>) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"count is: "</span> + count);</div><div class="line">	count++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// count is: 1</span></div><div class="line"><span class="comment">// count is: 2</span></div><div class="line"><span class="comment">// count is: 3</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"count is: "</span> + i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// count is: 1</span></div><div class="line"><span class="comment">// count is: 2</span></div><div class="line"><span class="comment">// count is: 3</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">"ahceclwlxo"</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; str.length; i+=<span class="number">2</span>) &#123;</div><div class="line">	<span class="built_in">console</span>.log(str[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// h</span></div><div class="line"><span class="comment">// e</span></div><div class="line"><span class="comment">// l</span></div><div class="line"><span class="comment">// l</span></div><div class="line"><span class="comment">// o</span></div></pre></td></tr></table></figure>
<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//function declaration</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalize</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> str.charAt(<span class="number">0</span>).toUpperCase() + str.slice(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">capitalize(<span class="string">"paris"</span>);</div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// Paris</span></div><div class="line"></div><div class="line"><span class="comment">// function expression</span></div><div class="line"><span class="keyword">var</span> capitalize = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> str.charAt(<span class="number">0</span>).toUpperCase() + str.slice(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">capitalize(<span class="string">"paris"</span>);</div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// Paris</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> doStep = <span class="function"><span class="keyword">function</span> <span class="title">nextStep</span>(<span class="params">step</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (step &gt; <span class="number">0</span>) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"Step! : "</span> + <span class="keyword">this</span>.name);</div><div class="line">		nextStep.call(<span class="keyword">this</span>, step - <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">"stranger"</span>, <span class="attr">walk</span>: doStep&#125;;</div><div class="line">person.walk(<span class="number">5</span>);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> unikys = &#123;</div><div class="line">	 <span class="attr">yell</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		 <span class="built_in">console</span>.log(<span class="string">"YELL!"</span>);</div><div class="line">	 &#125;</div><div class="line"> &#125;;</div><div class="line"> unikys.yell();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line"> <span class="built_in">console</span>.log(<span class="string">"Mouse clicked!"</span>);</div><div class="line">&#125;;</div><div class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>, callback);</div><div class="line"></div><div class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"return a+b;"</span>);</div><div class="line"><span class="built_in">console</span>.log(func(<span class="number">5</span>, <span class="number">6</span>) === <span class="number">11</span>);</div></pre></td></tr></table></figure>
<ul>
<li><a href="http://unikys.tistory.com/305" target="_blank" rel="external">[속깊은 자바스크립트 강좌] function declaration vs function expression 차이점</a></li>
</ul>
<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doMath</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line">	<span class="built_in">console</span>.log(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line">doMath();</div><div class="line"><span class="comment">// Output: 1</span></div><div class="line"><span class="built_in">console</span>.log(x);</div><div class="line"><span class="comment">// Error, x is not defined.</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> y = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	y = <span class="number">10</span>;</div><div class="line">	<span class="built_in">console</span>.log(y);</div><div class="line">&#125;</div><div class="line"></div><div class="line">doSomething();</div><div class="line"><span class="comment">// Output: 10</span></div><div class="line"><span class="built_in">console</span>.log(y);</div><div class="line"><span class="comment">// Output: 10;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> phrase = <span class="string">"Hi there!"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> phrase = <span class="string">"Goodbye!"</span>;</div><div class="line">	<span class="built_in">console</span>.log(phrase);</div><div class="line">&#125;</div><div class="line"></div><div class="line">doSomething();</div><div class="line"><span class="comment">// Output: GoodBye!</span></div><div class="line"><span class="built_in">console</span>.log(phrase);</div><div class="line"><span class="comment">// Output: Hi there!</span></div></pre></td></tr></table></figure>
<h2 id="Higher-order-functions"><a href="#Higher-order-functions" class="headerlink" title="Higher order functions"></a>Higher order functions</h2><p>A higher-order function is a function that can take another function as an argument, or that returns a function as a result.</p>
<ul>
<li>First Class Functions<ul>
<li>Functions in JavaScript are treated as objects.</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Taking Functions as Arguments.</span></div><div class="line"><span class="keyword">var</span> proveIt = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	alert(<span class="string">"you triggered "</span> + <span class="keyword">this</span>.id);</div><div class="line">&#125;;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"clicker"</span>).addEventListener(<span class="string">"click"</span>, proveIt);</div><div class="line"></div><div class="line"><span class="comment">// Returning Functions as Results.</span></div><div class="line"><span class="keyword">var</span> snakify = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> text.replace(<span class="regexp">/millenials/ig</span>, <span class="string">"Snake People"</span>);</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(snakify(<span class="string">"The Millenials are always up to something."</span>));</div><div class="line"><span class="comment">// Output: The Snake People are always up to something.</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> attitude = <span class="function"><span class="keyword">function</span>(<span class="params">original, replacement, source</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> source.replace(original, replacement);</div><div class="line">	&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> snakify = attitude(<span class="regexp">/millenials/ig</span>, <span class="string">"Snake People"</span>);</div><div class="line"><span class="keyword">var</span> hippify = attitude(<span class="regexp">/baby boomers/ig</span>, <span class="string">"Aging Hippies"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(snakify(<span class="string">"The Millenials are always up to something."</span>));</div><div class="line"><span class="comment">// Output: The Snake People are always up to something.</span></div><div class="line"><span class="built_in">console</span>.log(hippify(<span class="string">"The Baby Boomers just look the other way."</span>));</div><div class="line"><span class="comment">// Output: The Aging Hippies just look the other way.</span></div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.sitepoint.com/higher-order-functions-javascript/" target="_blank" rel="external">Higher-Order Functions in JavaScript</a></li>
</ul>
<h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> friends = [<span class="string">"Charlie"</span>, <span class="string">"Liz"</span>, <span class="string">"David"</span>, <span class="string">"Mattias"</span>];</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(friends[<span class="number">0</span>]);</div><div class="line"><span class="comment">// Output: Charlie</span></div><div class="line"></div><div class="line">friends[<span class="number">0</span>] = <span class="string">"Amelie"</span>;  <span class="comment">// Edit data</span></div><div class="line">friends[<span class="number">4</span>] = <span class="string">"Andrea"</span>   <span class="comment">// Add data</span></div><div class="line"></div><div class="line"><span class="comment">// Initialize an empty array</span></div><div class="line"><span class="keyword">var</span> friends = [];</div><div class="line"><span class="keyword">var</span> friends = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="keyword">var</span> random_collection = [<span class="number">4</span>, <span class="literal">true</span>, <span class="string">"abc"</span>, <span class="literal">null</span>];</div><div class="line"><span class="built_in">console</span>.log(random_collection.length);</div><div class="line"><span class="comment">// Output: 4</span></div></pre></td></tr></table></figure>
<h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"orange"</span>, <span class="string">"yellow"</span>];</div><div class="line"></div><div class="line">colors.push(<span class="string">"green"</span>);     <span class="comment">// ["red", "orange", "yellow", "green"]</span></div><div class="line"><span class="keyword">var</span> color = colors.pop(); <span class="comment">// ["red", "orange", "yellow"]</span></div><div class="line"><span class="built_in">console</span>.log(color);</div><div class="line"><span class="comment">// Output: Green</span></div><div class="line"></div><div class="line">colors.unshift(<span class="string">"blue"</span>); <span class="comment">// ["blue", "red", "orange", "yellow"]</span></div><div class="line">colors.shift();         <span class="comment">// ["red", "orange", "yellow"]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> index = colors.indexOf(<span class="string">"red"</span>);</div><div class="line"><span class="built_in">console</span>.log(index);</div><div class="line"><span class="comment">// Output: 0</span></div><div class="line"><span class="built_in">console</span>.log(colors.indexOf(<span class="string">"black"</span>))</div><div class="line"><span class="comment">// Output: -1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> carColors = colors.slice(<span class="number">0</span>, <span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(carColors);</div><div class="line"><span class="comment">// Output: ["red", "orange"]</span></div><div class="line"><span class="built_in">console</span>.log(colors);</div><div class="line"><span class="comment">// Output: ["red", "orange", "yellow"]</span></div></pre></td></tr></table></figure>
<h3 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"orange"</span>, <span class="string">"yellow"</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; colors.length; i++) &#123;</div><div class="line">	<span class="built_in">console</span>.log(colors[i]);</div><div class="line">&#125;</div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// red</span></div><div class="line"><span class="comment">// orange</span></div><div class="line"><span class="comment">// yellow</span></div><div class="line"></div><div class="line">colors.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">color</span>)) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(color);</div><div class="line">&#125;</div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// red</span></div><div class="line"><span class="comment">// orange</span></div><div class="line"><span class="comment">// yellow</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printColor</span>(<span class="params">color</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(color);</div><div class="line">&#125;</div><div class="line">colors.forEach(printColor);</div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// red</span></div><div class="line"><span class="comment">// orange</span></div><div class="line"><span class="comment">// yellow</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (count &lt; colors.length) &#123;</div><div class="line">	<span class="built_in">console</span>.log(colors[count]);</div><div class="line">	count++;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// red</span></div><div class="line"><span class="comment">// orange</span></div><div class="line"><span class="comment">// yellow</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.myForEach = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">		func(<span class="keyword">this</span>[i]);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">colors.myForEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(name);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// red</span></div><div class="line"><span class="comment">// orange</span></div><div class="line"><span class="comment">// yellow</span></div></pre></td></tr></table></figure>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="external">Array.prototype.forEach() (MDN)</a></li>
</ul>
<h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Array</span></div><div class="line"><span class="keyword">var</span> person = [<span class="string">"Cindy"</span>, <span class="number">32</span>, <span class="string">"Missoula"</span>];</div><div class="line"></div><div class="line"><span class="comment">// Object: store data in key-value pairs.</span></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">"Cindy"</span>,</div><div class="line">	<span class="attr">age</span>: <span class="number">32</span>,</div><div class="line">	<span class="attr">city</span>: <span class="string">"Missoula"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(persion[<span class="string">"name"</span>]); <span class="comment">// Output: Cindy</span></div><div class="line"><span class="built_in">console</span>.log(person.name);     <span class="comment">// Output: Cindy</span></div><div class="line"></div><div class="line">person[<span class="string">"age"</span>] += <span class="number">1</span>;</div><div class="line">person.city = <span class="string">"London"</span>;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create objects</span></div><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line">person.name = <span class="string">"Travis"</span>;</div><div class="line">person.age = <span class="number">20</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">"Travis"</span>,</div><div class="line">	<span class="attr">age</span>: <span class="number">20</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">person.name = <span class="string">"Travis"</span>;</div><div class="line">person.age = <span class="number">20</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> junkObject = &#123;</div><div class="line">	<span class="attr">age</span>: <span class="number">20</span>,</div><div class="line">	<span class="attr">color</span>: <span class="string">"blue"</span>,</div><div class="line">	<span class="attr">friends</span>: [<span class="string">"Travis"</span>, <span class="string">"Cindy"</span>],</div><div class="line">	<span class="attr">pet</span>: &#123;</div><div class="line">		<span class="attr">species</span>: <span class="string">"Dog"</span>,</div><div class="line">		<span class="attr">age</span>: <span class="number">2</span></div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">someObject<span class="number">.1</span>blah    <span class="comment">// Invalid: can't start with number.</span></div><div class="line">someObject[<span class="string">"1blah"</span>] <span class="comment">// Valid</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">"name"</span>;</div><div class="line">someObject.str  <span class="comment">// Invalid</span></div><div class="line">someObject[str] <span class="comment">// Valid</span></div><div class="line"></div><div class="line">someObject.fav color    <span class="comment">//Invalid</span></div><div class="line">someObject[<span class="string">"fav color"</span>] <span class="comment">// Valid</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Object with method</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">"Chunk"</span>,</div><div class="line">	<span class="attr">age</span>: <span class="number">45</span>,</div><div class="line">	<span class="attr">isCool</span>: <span class="literal">false</span>,</div><div class="line">	<span class="attr">friends</span>: [<span class="string">"bob"</span>, <span class="string">"tina"</span>],</div><div class="line">	<span class="attr">add</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> x+y;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Like namespace</span></div><div class="line"><span class="keyword">var</span> dog = &#123;</div><div class="line">	<span class="attr">speak</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"WOOF!"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cat = &#123;</div><div class="line">	<span class="attr">speak</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"MEOW!"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dog.speak();  <span class="comment">// Output: WOOF!</span></div><div class="line">cat.speak();  <span class="comment">// Output: MEOW!</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> comments = &#123;&#125;;</div><div class="line"></div><div class="line">comments.data = [<span class="string">"Good Job!"</span>, <span class="string">"Bye"</span>, <span class="string">"Hey"</span>];</div><div class="line"></div><div class="line">comments.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(el);</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">comments.print();</div><div class="line"><span class="comment">// Output</span></div><div class="line"><span class="comment">// Good Job!</span></div><div class="line"><span class="comment">// Bye</span></div><div class="line"><span class="comment">// Hey</span></div></pre></td></tr></table></figure>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ul>
<li>Document Object Model<ul>
<li>The interface between Javascript and HTML+CSS</li>
<li>The browser turns every HTML tags into a Javascript object.</li>
</ul>
</li>
</ul>
<h3 id="Selectors"><a href="#Selectors" class="headerlink" title="Selectors"></a>Selectors</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"highlight"</span>&gt;</span>List Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bolded"</span>&gt;</span>List Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bolded"</span>&gt;</span>List Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tag = <span class="built_in">document</span>.getElementById(<span class="string">"highlight"</span>);</div><div class="line"><span class="built_in">console</span>.log(tag); <span class="comment">// Output: &lt;li id="highlight"&gt;List Item 1&lt;/li&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> tags = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"bolded"</span>);</div><div class="line"><span class="built_in">console</span>.log(tags[<span class="number">0</span>]);  <span class="comment">// Output: &lt;li class="bolded"&gt;List Item 2&lt;/li&gt;</span></div><div class="line"></div><div class="line">tags = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</div><div class="line"><span class="built_in">console</span>.log(tags[<span class="number">0</span>]); <span class="comment">// Output: &lt;li id="highlight"&gt;List Item 1&lt;/li&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// Returns the first element that matches a given CSS-style selector.</span></div><div class="line">tag = <span class="built_in">document</span>.querySelector(<span class="string">"#highlight"</span>);</div><div class="line">tag = <span class="built_in">document</span>.querySelector(<span class="string">".bolded"</span>);</div><div class="line">tag = <span class="built_in">document</span>.querySelector(<span class="string">"h1"</span>);</div><div class="line"></div><div class="line">tags = <span class="built_in">document</span>.querySelectorAll(<span class="string">"h1"</span>);</div><div class="line"><span class="built_in">console</span>.log(tags[<span class="number">0</span>]);  <span class="comment">// Output: &lt;h1&gt;Hello&lt;/h1&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Manipulating-style"><a href="#Manipulating-style" class="headerlink" title="Manipulating style"></a>Manipulating style</h3><p>Recommended for styles to be defined in a separate file or files.</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.some-class</span> &#123;</div><div class="line">	<span class="attribute">color</span>: blue;</div><div class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This is bad.</span></div><div class="line"><span class="keyword">var</span> tag = <span class="built_in">document</span>.getElementById(<span class="string">"highlight"</span>);</div><div class="line">tag.style.color = <span class="string">"blue"</span>;</div><div class="line">tag.style.border = <span class="string">"10px solid red"</span>;</div><div class="line"></div><div class="line"><span class="comment">//This is better.</span></div><div class="line"><span class="keyword">var</span> tag = <span class="built_in">document</span>.getElementById(<span class="string">"highlight"</span>);</div><div class="line">tag.classList.add(<span class="string">"some-class"</span>);</div></pre></td></tr></table></figure>
<h3 id="Manipulating-text-and-content"><a href="#Manipulating-text-and-content" class="headerlink" title="Manipulating text and content"></a>Manipulating text and content</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">	This is an <span class="tag">&lt;<span class="name">string</span>&gt;</span>awesome<span class="tag">&lt;/<span class="name">string</span>&gt;</span> paragraph</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tag = <span class="built_in">document</span>.querySelector(<span class="string">"p"</span>);</div><div class="line"><span class="built_in">console</span>.log(tag.textContent)  </div><div class="line"><span class="comment">// Output: This is an awesome paragraph</span></div><div class="line"><span class="built_in">console</span>.log(tag.innerHTML)	</div><div class="line"><span class="comment">// Output: This is an &lt;stong&gt;awesome&lt;/string&gt; paragraph</span></div></pre></td></tr></table></figure>
<h3 id="Manipulating-attributes"><a href="#Manipulating-attributes" class="headerlink" title="Manipulating attributes"></a>Manipulating attributes</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.google.com"</span>&gt;</span>I am a link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"logo.png"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.querySelector(<span class="string">"a"</span>);</div><div class="line"><span class="built_in">console</span>.log(link.getAttribute(<span class="string">"href"</span>)); <span class="comment">// Output: www.google.com</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.querySelecotr(<span class="string">"img"</span>);</div><div class="line">img.setAttribute(<span class="string">"src"</span>, <span class="string">"corgi.png"</span>);</div></pre></td></tr></table></figure>
<h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>);</div><div class="line">button.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Clicked the button!"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">"li"</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; lis.length; i++) &#123;</div><div class="line">	lis[i].addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">this</span>.style.color = <span class="string">"pink"</span>;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://stackoverflow.com/questions/17047497/what-is-the-difference-between-change-and-input-event-for-an-input-element/17047607#17047607" target="_blank" rel="external">What is the difference between “change” and “input” event for an INPUT element (StackOverflow)</a></li>
</ul>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol>
<li><code>&lt;script type=&quot;text/javascript&quot; src=&quot;script.js&quot; async&gt;&lt;/script&gt;</code><ul>
<li><code>&lt;head&gt;</code>안에서 <code>&lt;script type=&quot;text/javascript&quot; src=&quot;script.js&quot;&gt;&lt;/script&gt;</code>로 스크립트 파일을 불러오면 다 불러오기 전까지 다음 코드로 진행하지 않거나 HTML 엘리먼트를 선택하는 스크립트가 있다면 오류가 발생한다. 이를 보완하기 위해 <code>async</code>, <code>defer</code> 속성을 지원하게 되었으며 IE10 미만에서는 지원하지 않기 때문에 <body> 태그의 마지막 부분에서 스크립트 파일들을 호출하기도 한다.</body></li>
<li><a href="https://stackoverflow.com/questions/436411/where-should-i-put-script-tags-in-html-markup" target="_blank" rel="external">Where should I put script tags in HTML markup?  (StackOverflow)</a></li>
<li><a href="https://developers.google.com/speed/docs/insights/BlockingJS" target="_blank" rel="external">Remove Render-Blocking JavaScript (Google Developers)</a></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Javascript-Basics&quot;&gt;&lt;a href=&quot;#Javascript-Basics&quot; class=&quot;headerlink&quot; title=&quot;Javascript Basics&quot;&gt;&lt;/a&gt;Javascript Basics&lt;/h1&gt;&lt;h2 id=&quot;Primi
    
    </summary>
    
      <category term="Javascript" scheme="http://blog.jhko.me/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://blog.jhko.me/tags/javascript/"/>
    
      <category term="basic" scheme="http://blog.jhko.me/tags/basic/"/>
    
  </entry>
  
  <entry>
    <title>마크다운(Markdown) 참고자료</title>
    <link href="http://blog.jhko.me/2017/07/12/markdown-cheatsheet/"/>
    <id>http://blog.jhko.me/2017/07/12/markdown-cheatsheet/</id>
    <published>2017-07-12T14:43:18.000Z</published>
    <updated>2017-11-26T17:39:27.013Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>앞으로 블로그 글 작성을 위해 <a href="https://guides.github.com/features/mastering-markdown" target="_blank" rel="external">GitHub Markdown</a>을 참고하여 정리했습니다.</p>
</blockquote>
<h1 id="Markdown-Cheatsheet"><a href="#Markdown-Cheatsheet" class="headerlink" title="Markdown Cheatsheet"></a>Markdown Cheatsheet</h1><h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># H1</div><div class="line">## H2</div><div class="line">### H3</div><div class="line">#### H4</div><div class="line">##### H5</div><div class="line">###### H6</div></pre></td></tr></table></figure>
<h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><p>…</p>
<h2 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*italics*, _italics_</div><div class="line">**bold**, __bold__</div><div class="line">**bold and __italics__**</div><div class="line">~~strike~~</div></pre></td></tr></table></figure>
<p><em>italics</em>, <em>italics</em><br><strong>bold</strong>, <strong>bold</strong><br><strong>bold and <strong>italics</strong></strong><br><del>strike</del></p>
<h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1. One</div><div class="line">2. Two</div><div class="line">  1. One</div><div class="line">3. Three</div><div class="line">  * content</div><div class="line"></div><div class="line">- title</div><div class="line">  - content</div></pre></td></tr></table></figure>
<ol>
<li>One</li>
<li>Two<ol>
<li>One</li>
</ol>
</li>
<li>Three<ul>
<li>content</li>
</ul>
</li>
</ol>
<ul>
<li>title<ul>
<li>content</li>
</ul>
</li>
</ul>
<h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Unsplash Source](Unsplash Source.jpg)</div></pre></td></tr></table></figure>
<p><img src="Unsplash Source.jpg" alt="Unsplash Source"></p>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[GitHub Markdown](https://guides.github.com/features/mastering-markdown)</div></pre></td></tr></table></figure>
<p><a href="https://guides.github.com/features/mastering-markdown" target="_blank" rel="external">GitHub Markdown</a></p>
<h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; A block quotation (also known as a long quotation or extract) is a quotation in a written document that is set off from the main text as a paragraph, or block of text, and typically distinguished visually using indentation and a different typeface or smaller size font. - In [Wikipedia](https://en.wikipedia.org/wiki/Block_quotation)</div></pre></td></tr></table></figure>
<blockquote>
<p>A block quotation (also known as a long quotation or extract) is a quotation in a written document that is set off from the main text as a paragraph, or block of text, and typically distinguished visually using indentation and a different typeface or smaller size font. - In <a href="https://en.wikipedia.org/wiki/Block_quotation" target="_blank" rel="external">Wikipedia</a></p>
</blockquote>
<h2 id="Inline-code"><a href="#Inline-code" class="headerlink" title="Inline code"></a>Inline code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello, `This is inline code.`</div></pre></td></tr></table></figure>
<p>Hello, <code>This is inline code.</code></p>
<h2 id="Horizontal-Rule"><a href="#Horizontal-Rule" class="headerlink" title="Horizontal Rule"></a>Horizontal Rule</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">---</div></pre></td></tr></table></figure>
<hr>
<h2 id="Syntax-highlighting"><a href="#Syntax-highlighting" class="headerlink" title="Syntax highlighting"></a>Syntax highlighting</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">```java</div><div class="line">public void printHelloWorld() &#123;</div><div class="line">  System.out.println(&quot;Hello, World!&quot;);</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printHelloWorld</span><span class="params">()</span> </span>&#123;</div><div class="line">  System.out.println(<span class="string">"Hello, World!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">항목1 | 가운데 정렬 | 오른쪽 정렬</div><div class="line">---- | :----: | ----:</div><div class="line">첫번째 | 두번째 | 참고</div><div class="line">세번째 | 네번째 | 비고</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>항목1</th>
<th style="text-align:center">가운데 정렬</th>
<th style="text-align:right">오른쪽 정렬</th>
</tr>
</thead>
<tbody>
<tr>
<td>첫번째</td>
<td style="text-align:center">두번째</td>
<td style="text-align:right">참고</td>
</tr>
<tr>
<td>세번째</td>
<td style="text-align:center">네번째</td>
<td style="text-align:right">비고</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;앞으로 블로그 글 작성을 위해 &lt;a href=&quot;https://guides.github.com/features/mastering-markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Markd
    
    </summary>
    
      <category term="Etc" scheme="http://blog.jhko.me/categories/Etc/"/>
    
    
      <category term="markdown" scheme="http://blog.jhko.me/tags/markdown/"/>
    
      <category term="cheatsheet" scheme="http://blog.jhko.me/tags/cheatsheet/"/>
    
      <category term="blog" scheme="http://blog.jhko.me/tags/blog/"/>
    
  </entry>
  
</feed>
